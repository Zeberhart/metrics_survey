id,fid,name,file,text,created_at,updated_at
1,27798254,pluginRegistryContains,,"
 
     public boolean pluginRegistryContains(String pluginName) {
        synchronized (registry) {
            Iterator iter;
            for (iter = registry.iterator(); iter.hasNext();) {
                PluginRegistryNode node = (PluginRegistryNode)iter.next();
                if (node.plugin.getName().equals(pluginName)) return true;
            }
        }
        return false;
    }
",2021-02-23 16:11:10.619765,2021-02-23 16:11:10.619765
2,27801498,setBinWidth,,"
 
   public void setBinWidth ( double new_bin_width ) {
    double old_bin_width = binWidth;
    binWidth = new_bin_width;
    pcs.firePropertyChange(
      ""binWidth"",
      new Double( old_bin_width ),
      new Double( new_bin_width )
    );
    repaint();
  } // setBinWidth( double )
",2021-02-23 16:11:10.671729,2021-02-23 16:11:10.671729
3,27802185,createGraphModel,,"
 
   public GraphModel createGraphModel ( List includedNodes ) {
    num_models++;
    System.out.println(""PGraphModel: creating a new non-super graphmodel: ""+num_models);

    GraphModel model =  new PGraphModel( ""Phoebe""+num_models, getModelSubSet( includedNodes ) );

    getCommunity().add( model );

    //return new PGraphModel( ""Phoebe""+num_models, getModelSubSet( includedNodes ) );


    return model;
  }
",2021-02-23 16:11:10.69076,2021-02-23 16:11:10.69076
4,22907997,removeRedundantOperations,,"
 
     private void removeRedundantOperations(OBEXElement file, List<OBEXElement> filesToRemove) {
        OBEXElement parentFolder = file;
        log.debug(""Removing redundant operations"");

        while ((parentFolder = parentFolder.getParent()) != null) {

            if (filesToRemove.contains(parentFolder)) {
                filesToRemove.remove(file);
                file = parentFolder;
            }
        }
    }
",2021-02-23 16:11:10.7085,2021-02-23 16:11:10.7085
5,44521080,BFSdist,,"
 
 	public void BFSdist(Node n, Vector ToDo, int[] indirConn){
	Node n2 = null;
	for (Enumeration es = n.adjEdges.elements() ; es.hasMoreElements() ;) {
		n2 = n.adjNode((Edge)es.nextElement());
		if (n2.dist<0){
		n2.dist=n.dist+1;
		indirConn[n2.dist]++;

		// important add adds to the end of the list
		ToDo.add(n2);
		}
	}
	if (!ToDo.isEmpty()){
		n2 = (Node) ToDo.remove(0);
		BFSdist(n2,ToDo,indirConn);
	}
	}
",2021-02-23 16:11:10.726125,2021-02-23 16:11:10.726125
6,45047585,exportXVRL,,"
 
 	public void exportXVRL(XMLStreamWriter xvrLDoc) throws Exception{
		JAXBContext context = JAXBContext.newInstance(ValidationReport.class);
		Marshaller m = context.createMarshaller();
		m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
		ValidationReport vReport = exportVReport();
		if (vReport!=null) m.marshal(vReport, xvrLDoc);
	}
",2021-02-23 16:11:10.74391,2021-02-23 16:11:10.74391
7,49250848,isInvalidEmailLink,,"
 
     public boolean isInvalidEmailLink() {
        return textLink.contains(ArticleLink.EMAIL_AT_SEPARATOR) &&
            !textLink.toLowerCase(Locale.getDefault()).startsWith(""mailto:"") && //$NON-NLS-1$
            wikiFileURL.getWikiFileName(true).contains(ArticleLink.EMAIL_AT_SEPARATOR);
    }
",2021-02-23 16:11:10.771694,2021-02-23 16:11:10.771694
8,20950900,load,,"
 
 	private void load(LockedFile file) throws SQLIOException {
		file.setPosition(POS_HEADER);

		byte[] buffer = new byte[BASE_HEADER_SIZE];
		file.read(buffer, 0, BASE_HEADER_SIZE);

		type = buffer[POS_TYPE];
		lastUpdate = decode3Date(buffer, POS_LAST_UDPATE);
		recordsNum = DbfUtils.decodeLittleUint16(buffer, POS_RECORDS_NUM);
		recordSize = DbfUtils.decodeLittleUint16(buffer, POS_RECORD_SIZE);
		headerSize = DbfUtils.decodeLittleUint16(buffer, POS_HEADER_SIZE);

		verifyAndFixHeader(file);
	}
",2021-02-23 16:11:10.79201,2021-02-23 16:11:10.79201
9,31468595,getLength,,"
 
     public int getLength() {

        if (nodeListChanges != changes || nodeListLength == -1) {
            nodeListChanges = changes;
            nodeListLength = 0;
            nodeListIndex = 0;
            nodeListNode = firstChild;
            for (NodeImpl node = firstChild; node != null; node = node.nextSibling) {
                nodeListLength++;
            }
        }
        
        return nodeListLength;

    } // getLength():int
",2021-02-23 16:11:10.812736,2021-02-23 16:11:10.812736
10,31468812,getAttributeNS,,"
 
     public String getAttributeNS(String namespaceURI, String localName) {

        if (syncData) {
            synchronizeData();
        }

        Attr attr = (Attr)(attributes.getNamedItemNS(namespaceURI, localName));
        return (attr == null) ? null : attr.getValue();

    } // getAttributeNS(String,String):String
",2021-02-23 16:11:10.839673,2021-02-23 16:11:10.839673
11,5440773,getPageContext,,"
 
     public PageContext getPageContext(Servlet servlet, ServletRequest request, ServletResponse response, String errorPageURL, boolean needsSession, int bufferSize, boolean autoFlush) {
        PageContextImpl context = new PageContextImpl();
        context.initialize(servlet, request, response, errorPageURL, needsSession, bufferSize, autoFlush);
        return context;
    }
",2021-02-23 16:11:10.860429,2021-02-23 16:11:10.860429
12,34413723,openNewContainerWindow,,"
 
 		public boolean openNewContainerWindow(String containerName, String containerDescription){
			//if name is blank, disable use default option
			NewContainerImportWindow window;
			if(containerName.equals("""")){
				window = new NewContainerImportWindow();
			}
			else{
				window = new NewContainerImportWindow(containerName,containerDescription);
			}
			window.setParent(OrganiserView.this);
			try{
				window.doModal();
			}
			catch(InterruptedException ie){
				ie.printStackTrace(System.err);
			}
			if(doImport){
				importer.setContainerName(window.getName());
				importer.setContainerDescription(window.getDescription());
			}
			return doImport;
		}
",2021-02-23 16:11:10.879151,2021-02-23 16:11:10.879151
13,34413807,close,,"
 
 	public void close(){
		Tabpanel tempPanel = null;
		View tempView = null;
		List<?> list;
		Enumeration<Tabbox> tabs = primaryTabMap.keys();
		while (tabs.hasMoreElements())
		{
			list = tabs.nextElement().getTabpanels().getChildren();
			Iterator<?> itr = list.iterator();
			while(itr.hasNext()){
				tempPanel = (Tabpanel)itr.next();
				tempView = (View)tempPanel.getChildren().get(0);
				tempView.deregisterView();
			}
		}
	}
",2021-02-23 16:11:10.898582,2021-02-23 16:11:10.898582
14,34413808,init,,"
 
 	private void init() {
		_innerData = Collections.synchronizedMap(new LinkedHashMap<String,Object>());
		Iterator<Entry<String,Object>> itr = _srcModel.entrySet().iterator();
		while(itr.hasNext()){
			Entry<String, Object> entry = itr.next();
			_innerData.put(entry.getKey(), entry.getValue());
		}
		
		_srcListener = new ListDataListener(){
			public void onChange(ListDataEvent event) {
				onListDataChange(event);
			}
		};
		
		_srcModel.addListDataListener(_srcListener);
	}
",2021-02-23 16:11:10.918033,2021-02-23 16:11:10.918033
15,19412370,fileInfoGenerated,,"
 
     public void fileInfoGenerated(FileInfoEvent e) {
//      FileInfoContainer fileInfo = e.getInfoContainer();
//        if (fileInfo.getClass().equals(StatusInformation.class)) {
//          System.err.println(""A file status event was received."");
//          System.err.println(""The status information object is: "" +
//                             fileInfo);
//        }
    }
",2021-02-23 16:11:10.93741,2021-02-23 16:11:10.93741
16,19413001,messageSent,,"
 
     public void messageSent(MessageEvent e) {
        String str = e.getMessage();
        if (str.endsWith(DIR_ADDED)) {
            str = str.substring(DIRECTORY.length(), str.indexOf(DIR_ADDED)).trim();
            createCvsFiles(str);
        }
        super.messageSent(e);
    }
",2021-02-23 16:11:10.957425,2021-02-23 16:11:10.957425
17,4627680,updateSchema,,"
 
     public void updateSchema(String kind, SchemaTO schemaTO) {
        try {
            restTemplate.postForObject(baseURL
                    + ""schema/"" + kind + ""/update"", schemaTO, SchemaTO.class);
        } catch (SyncopeClientCompositeErrorException e) {
            LOG.error(""While updating a user schema"", e);
        }
    }
",2021-02-23 16:11:10.976907,2021-02-23 16:11:10.976907
18,15689897,getAll,,"
 
     public List getAll(Object key) {
        Object value = mMap.get(key);
        if (value instanceof List) {
            return ((List)value);
        }
        else {
            List list = new ArrayList();
            if (value != null || mMap.containsKey(key)) {
                list.add(value);
            }
            mMap.put(key, list);
            return list;
        }
    }
",2021-02-23 16:11:10.99574,2021-02-23 16:11:10.99574
19,4114383,add,,"
 
     public boolean add(Date date) {
	if (dates.contains(date)) 
	    return false; 
	
	boolean added = false;
	for (int i=0; i < dates.size() && !added; i++) {
	    Date nextDate = dates.get(i);
	    if (date.before(nextDate)) {
		dates.add(i, date);
		added = true;
	    }
	}
	if (!added) {
	    dates.add(date);
	}
	return true;
    }
",2021-02-23 16:11:11.015561,2021-02-23 16:11:11.015561
20,29318894,getTargetServiceName,,"
 
   protected String getTargetServiceName(AddressingHeaders headers) throws Exception {
    To toURI = headers.getTo();
    if (toURI == null) {
      return null;
    }
    String to = toURI.getPath();
    if (to == null) {
      return null;
    }
    // set the target service
    return (to.substring(to.lastIndexOf('/') + 1));
  }
",2021-02-23 16:11:11.034694,2021-02-23 16:11:11.034694
21,22407318,jbInit,,"
 
     private void jbInit() throws Exception {
        setLayout(new GridBagLayout());

        add(m_environmentpanel,
            new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0,
                                   GridBagConstraints.CENTER,
                                   GridBagConstraints.HORIZONTAL,
                                   new Insets(0, 0, 0, 0), 0, 0));
    }
",2021-02-23 16:11:11.054088,2021-02-23 16:11:11.054088
22,22407577,setTargetMap,,"
 
     public AntTargetMap setTargetMap() {
        AntTargetMap targetMap = null;
        String strDefaultTarget = null;
        targetMap = m_buildfile.getTargetMap();
        strDefaultTarget = m_buildfile.getDefaultTarget();

        if (m_bSelectWithDescription) {
            targetMap.selectWithDescription();

        }
        setTargetMap(targetMap);

        return m_targetMap;
    }
",2021-02-23 16:11:11.072496,2021-02-23 16:11:11.072496
23,1412807,capitalizeString,,"
 
     public String capitalizeString(String s) {
        String result = """";
        
        for(int i = 0; i < s.length(); i++) {
            if(i == 0 || s.substring(i-1, i).equals("" ""))
                result += s.substring(i, i + 1).toUpperCase();
            else
                result += s.substring(i, i + 1);
                
        }
        
        return result;
    }
",2021-02-23 16:11:11.093757,2021-02-23 16:11:11.093757
24,48714932,getRootElement,,"
 
     protected Element getRootElement() {
        Assert.notNull(resource, ""resource cannot be null"");
        Document document = xmlDefinitionLoader.loadDocument(resource, new ClassPathResource(""org/impalaframework/module/source/moduledefinition.xsd"", this.getClass().getClassLoader()));

        Element root = document.getDocumentElement();
        return root;
    }
",2021-02-23 16:11:11.114348,2021-02-23 16:11:11.114348
25,48714949,repairModules,,"
 
     public void repairModules() {
        RootModuleDefinition rootModuleDefinition = getModuleStateHolder().getRootModuleDefinition();
        ModuleOperation operation = facade.getModuleOperationRegistry().getOperation(
                ModuleOperationConstants.RepairModuleOperation);
        ConstructedModuleDefinitionSource newModuleDefinitionSource = new ConstructedModuleDefinitionSource(
                rootModuleDefinition);

        ModuleOperationInput input = new ModuleOperationInput(newModuleDefinitionSource, null, null);
        execute(operation, input);
    }
",2021-02-23 16:11:11.137748,2021-02-23 16:11:11.137748
26,18123253,setSelectedScript,,"
 
 	public void setSelectedScript(Object script) {
		selectedScript = script;

		// expand to and select the specified container
		List itemsToExpand = new ArrayList();
		IContainer parent = project.getParent();
		while (parent != null) {
			itemsToExpand.add(0, parent);
			parent = parent.getParent();
		}
		treeViewer.setExpandedElements(itemsToExpand.toArray());
		treeViewer.setSelection(new StructuredSelection(project), true);
	}
",2021-02-23 16:11:11.168217,2021-02-23 16:11:11.168217
27,38737384,setSecurityMode,,"
 
     public int setSecurityMode(int level,String authToken) throws RemoteException {
        if(!this.authToken.equals(authToken)){
            throw new RemoteException(""Invalid Login Token"");
        }
        serverSettingBean.setSecureMode(""""+level);
        serverSettingBean.updateSettings();
        securityMode=level;
        return securityMode;
    }
",2021-02-23 16:11:11.18633,2021-02-23 16:11:11.18633
28,50994916,setPhoto,,"
 
 	public void setPhoto(JdaiPhoto photo) {
		String text = null;
		if (photo != null) {
			label.setText("""");
			try {
				text = photo.getSection().getInfoStore().getCaption(photo);
			} catch (JdaiReadException e) {
				JdaiGuiHelpers.reportException(""Unable to read caption"", e);
			}
			if (text == null || text.equals(""""))
				text = ""No caption set"";
		} else {
			label.setIcon(null);
		}
		label.setToolTipText(text);
		setNewPhoto(photo);
	}
",2021-02-23 16:11:11.206972,2021-02-23 16:11:11.206972
29,50995324,createCacheFile,,"
 
   protected void createCacheFile(Photo photo, File photoCacheFile, PhotoDimension dimension) throws IOException {
    OutputStream photoOS = new BufferedOutputStream(new FileOutputStream(photoCacheFile));
    PhotoHelper.getInstance().writeUncachedThumbnail(photo, photoOS);
    photoOS.close();
  }
",2021-02-23 16:11:11.225811,2021-02-23 16:11:11.225811
30,14477536,go,,"
 
 	public void go(String theUserName) {
		try {
			new ChatUI((MessageInputReceiver) this, theUserName);

			// shake hands
			writer.println(theUserName);
			writer.flush();
			// OK means init with server went well
			if (reader.readLine().equals(""OK"")) {
				initialized = true;
				readChat();
			} else {
				bailOut(new IOException(""handshake failed""));
			}
		} catch (IOException ioe) {
			bailOut(ioe);
		} catch (Exception e) {
			bailOut(e);
		}
	}
",2021-02-23 16:11:11.245223,2021-02-23 16:11:11.245223
31,39840471,testCookieGreaterThan,,"
 
     public void testCookieGreaterThan() throws ServletException,  JspException {
        GreaterThanTag gt = new GreaterThanTag();
        gt.setPageContext(pageContext);
        gt.setCookie(COOKIE_KEY);
        gt.setValue(LESSER_VAL);

        assertTrue(
        	""Cookie Value ("" + GREATER_VAL + "") is greater than value ("" + LESSER_VAL + "")"", 
        	gt.condition());
    }
",2021-02-23 16:11:11.264047,2021-02-23 16:11:11.264047
32,44118809,remove,,"
 
     public void remove() {
        // FIXME (magda) wlaciwie to powinna byc tez metoda mapy/jakiegos
        // nadrzednego obiektu tego przejscia, ktora usunie je z mapy. choc
        // jakbysmy trzymali parenta, to nie byloby problemu, bo w tej metodzie
        // obiekt by sie odczepial od kolekcji parenta i gc() bo go usunelo
    }
",2021-02-23 16:11:11.283422,2021-02-23 16:11:11.283422
33,49866815,createChecklistItem,,"
 
   public long createChecklistItem(long listId, String item, boolean isDone) {
    ContentValues values = new ContentValues();
    values.put(KEY_LIST_ID, listId);
    values.put(KEY_IS_DONE, isDone);
    values.put(KEY_ITEM, item);
    return mDb.insert(CHECKLIST_ITEM_TBL, null, values);
  }
",2021-02-23 16:11:11.305203,2021-02-23 16:11:11.305203
34,51122387,getMessage,,"
 
    public String getMessage() {
      StringBuffer sb = new StringBuffer();

      if (messages != null) {
         for (int i = 0; i < messages.size(); i++) {
            Object o = messages.elementAt(i);

            if (o != null) {
               sb.append(o.toString())
                 .append(""\n"");
            }
         }
      }

      return sb.toString();
   }
",2021-02-23 16:11:11.327119,2021-02-23 16:11:11.327119
35,49121415,createDataset,,"
 
     private XYDataset createDataset(double[]values,String name) {

        // create dataset 1...
        final XYSeries series = new XYSeries(name);
        
        for(int i=0; i<values.length;i++){
        	series.add(i,values[i]);
        }
        
        final XYSeriesCollection collection = new XYSeriesCollection();
        collection.addSeries(series);
        return collection;

    }
",2021-02-23 16:11:11.345773,2021-02-23 16:11:11.345773
36,43137003,getNAGString,,"
 
    public String getNAGString (boolean allNumeric) {
      if (nags == null) return null;

      StringBuilder sb = new StringBuilder();
      String suff = null;
      int count = 0;

         for (int i=0; i<nags.length; i++) {
	    suff = NAG.numberToString(nags[i], allNumeric);

	    if (suff != null) {
	       if (count++ > 0)
	          sb.append("" "");
	       sb.append(suff);
	    }
	 }
      return sb.toString();
   }
",2021-02-23 16:11:11.365514,2021-02-23 16:11:11.365514
37,2896279,print,,"
 
   public String print(String tab) {
    if (content instanceof RegExp) {
      return tab+""type = ""+type+Out.NL+tab+""content :""+Out.NL+((RegExp)content).print(tab+""  "");
    }
    else
      return tab+""type = ""+type+Out.NL+tab+""content :""+Out.NL+tab+""  ""+content;

  }
",2021-02-23 16:11:11.386009,2021-02-23 16:11:11.386009
38,21344301,loadCurrentApplicationSpec,,"
 
 	private ApplicationSpec loadCurrentApplicationSpec() {
		ApplicationSpec currentApplicationSpec = null;
		if (currentApplicationSpecFile != null && currentApplicationSpecFile.exists()) {
			try {
				currentApplicationSpec = applicationSpecSerializer
						.downloadApplicationSpec(new BufferedInputStream(new FileInputStream(
								currentApplicationSpecFile)));
				if (!validateCurrentApplicationSpec(currentApplicationSpec))
					currentApplicationSpec = null;
			} catch (Exception e) {
				log.error(""Could not read local application spec file"", e);
			}
		}
		return currentApplicationSpec;
	}
",2021-02-23 16:11:11.418561,2021-02-23 16:11:11.418561
39,38221424,removeService,,"
 
   public void removeService(String type) {
    CService service = (CService) services.get(type);
    if (service != null) {
      service.unsetContext();
      services.remove(type);
      fireServiceChanged(new CServiceEvent(this, service, CServiceEvent.REMOVED));
    }
  }
",2021-02-23 16:11:11.441068,2021-02-23 16:11:11.441068
40,38221537,addDigit,,"
 
   private void addDigit(char digit) {
    if (digit == '0' && value.equals(""0"")) return;
    if (value.equals(""0"")) value = """";
    if (update) {
      value = """";
      minus = false;
      comma = false;
    }
    update = false;
    value += digit;
    showValue();
  }
",2021-02-23 16:11:11.460273,2021-02-23 16:11:11.460273
41,48023365,evaluatePopulation,,"
 
 	public void evaluatePopulation (IntegerTypePopulation population, Simulation simulation, Object[] object){
		
		IntegerTypePopulation intPopulation = (IntegerTypePopulation) population;
		
		for (int i = 0; i < intPopulation.getChromossomesSet().size(); i++){
			
			intPopulation.getChromossomesSet().get(i).setFitness(this.calculateFitness(simulation.getChromossomesConfiguration(), intPopulation, i));
			
		}
		
		
	}
",2021-02-23 16:11:11.480609,2021-02-23 16:11:11.480609
42,41287529,play,,"
 
     public void play(){
        if(currentState == SimulatorState.STOPPED){
            setSimulationTime(0);
            simItem.initialize();
            startTimer();
            setState(SimulatorState.PLAYING);
        }
        else if(currentState == SimulatorState.PAUSED){
            startTimer();
            setState(SimulatorState.PLAYING);
        }
    }
",2021-02-23 16:11:11.500333,2021-02-23 16:11:11.500333
43,16777940,readFromFile,,"
 
    private void readFromFile() {
      try {
         FileReader fr = new FileReader(this.credentials);
         BufferedReader br = new BufferedReader(fr);
         this.username = br.readLine();
         this.password = br.readLine();
         br.close();
         fr.close();
      }
      catch (Exception e) {
         this.username = """";
         this.password = """";
      }
   }
",2021-02-23 16:11:11.520729,2021-02-23 16:11:11.520729
44,1736289,resetSchedConflict,,"
 
 	public void resetSchedConflict() {
		try {
			if (listData == null || listData.size() == 0)
				return;
			for (int i = 0; i < listData.size(); i++) {
				TblAuditor auditor = (TblAuditor) listData.get(i);
				auditor.setSchedConflict(false);
			}
		} catch (Exception ex) {
			logger.error(ex);
			FacesUtils.addErrorMessage(ex.getMessage());
		}
	}
",2021-02-23 16:11:11.542386,2021-02-23 16:11:11.542386
45,1741129,otherDoEndTagOperations,,"
 
     private void otherDoEndTagOperations() {
        //
        // TODO: code that performs other operations in doEndTag
        //       should be placed here.
        //       It will be called after initializing variables,
        //       finding the parent, setting IDREFs, etc, and
        //       before calling shouldEvaluateRestOfPageAfterEndTag().
        //
    }
",2021-02-23 16:11:11.563841,2021-02-23 16:11:11.563841
46,36634895,swapItems,,"
 
     public void swapItems(int index, int change){
        if(index >= 0 && index < allItems.length &&
                change >= 0 && change < allItems.length){
            MenuItem temp = allItems[index];
            allItems[index] = allItems[change];
            allItems[change] = temp;
        }
    }
",2021-02-23 16:11:11.583019,2021-02-23 16:11:11.583019
47,29601536,getBackCommand2,,"
 
     public Command getBackCommand2() {
        if (backCommand2 == null) {//GEN-END:|92-getter|0|92-preInit
            // write pre-init user code here
            backCommand2 = new Command(""Back"", Command.BACK, 0);//GEN-LINE:|92-getter|1|92-postInit
        // write post-init user code here
        }//GEN-BEGIN:|92-getter|2|
        return backCommand2;
    }
",2021-02-23 16:11:11.602759,2021-02-23 16:11:11.602759
48,19630615,addComponentDefinitionIdPropertyDescriptor,,"
 
 	protected void addComponentDefinitionIdPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_ComponentDefinitionReference_componentDefinitionId_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_ComponentDefinitionReference_componentDefinitionId_feature"", ""_UI_ComponentDefinitionReference_type""),
				 WorkflowPackage.Literals.COMPONENT_DEFINITION_REFERENCE__COMPONENT_DEFINITION_ID,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:11.621392,2021-02-23 16:11:11.621392
49,19632303,addUriPropertyDescriptor,,"
 
 	protected void addUriPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_ConfigurationPropertyReference_uri_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_ConfigurationPropertyReference_uri_feature"", ""_UI_ConfigurationPropertyReference_type""),
				 CanvasPackage.Literals.CONFIGURATION_PROPERTY_REFERENCE__URI,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:11.642077,2021-02-23 16:11:11.642077
50,12723449,vDice,,"
 
 protected AbstractMatrix3D vDice(int axis0, int axis1, int axis2) {
	super.vDice(axis0,axis1,axis2);
	
	// swap offsets
	int[][] offsets = new int[3][];
	offsets[0] = this.sliceOffsets;
	offsets[1] = this.rowOffsets;
	offsets[2] = this.columnOffsets;

	this.sliceOffsets = offsets[axis0];
	this.rowOffsets = offsets[axis1];
	this.columnOffsets = offsets[axis2];

	return this;
}
",2021-02-23 16:11:11.663177,2021-02-23 16:11:11.663177
51,12725774,actionPerformed,,"
 
 	public void actionPerformed(ActionEvent e) {
		int[] selectedRows = features.getSelectedRows();
		if (selectedRows.length > 0) {
			boolean valueToBeSet = ((Boolean) features.getValueAt(
					selectedRows[0], 0)).booleanValue();
			for (int i = 0; i < selectedRows.length; ++i) {
				features.setValueAt(new Boolean(!valueToBeSet),
						selectedRows[i], 0);
			}
		}
	}
",2021-02-23 16:11:11.681274,2021-02-23 16:11:11.681274
52,51019251,fScore,,"
 
     public double fScore(ONDEXConcept x, ONDEXConcept y) {
        double recall = recall(x, y);
        double precision = precision(x, y);
        double score = 0;
        if (recall + precision != 0) {
            score = (2d * recall * precision) / (recall + precision);
        }
        return score;
    }
",2021-02-23 16:11:11.699883,2021-02-23 16:11:11.699883
53,7848915,draw,,"
 
 	public void draw() {
		p4vj.cSketch.stroke(0);
		p4vj.cSketch.fill(128);
		p4vj.cSketch.rect(xPos, yPos, xSize, ySize);
		drawFPS();
		p4vj.cSketch.fill(255);
		p4vj.cSketch.textAlign(p.LEFT, p.BASELINE);
		p4vj.cSketch.textFont(p4vj.fontSS14, 14);
		p4vj.cSketch.text("" :: Control FPS"", xPos, yPos + ySize - 5);
	}
",2021-02-23 16:11:11.722818,2021-02-23 16:11:11.722818
54,19682824,handleHalt,,"
 
 	private int handleHalt() {
		//need to test that this is the root process
		if(processID == 0){
			Machine.halt(); 
		}else{
			//System.err.println(""non-root process trying to call halt"");
			return -1; //This is not the root process so ignore this one
		}
		
		Lib.assertNotReached(""Machine.halt() did not halt machine!"");
		return 0;
	}
",2021-02-23 16:11:11.749779,2021-02-23 16:11:11.749779
55,36760565,releaseExclusiveLock,,"
 
 	public void releaseExclusiveLock() {
		this.lock.lock();
		try {
			if (readers != 0  || writers != 1 ){
				this.throwError(""There should be no readers(""+readers+""), and just one writer (""+writers+"")"");
			}
			writers--;
			//wake up a writer if it is waiting; if not, wake up all the readers that are waiting, if any 
			if (writersWaitingCount > 0) {
				writersWaiting.signal();
			} else if (readersWaitingCount > 0) {
				readersWaiting.signalAll();
			}
		} finally {
			this.lock.unlock();
		}
	}
",2021-02-23 16:11:11.78986,2021-02-23 16:11:11.78986
56,37563349,getBounds,,"
 
 public Rectangle getBounds() {
	if (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
  java.awt.Rectangle bounds = handle.getBounds();
  return new Rectangle((int)bounds.getX(), (int)bounds.getY(), (int)bounds.getWidth(), (int)bounds.getHeight());
}
",2021-02-23 16:11:11.808489,2021-02-23 16:11:11.808489
57,35553511,refreshTreePanel,,"
 
 	public void refreshTreePanel() {

		root.removeAllChildren();

		root = new DefaultMutableTreeNode(""ALL"");
		treeModel = new DefaultTreeModel(root);

		tree.setModel(treeModel);
		tree.setBounds(new Rectangle(0, 0, 196, 443));
		tree.setLayout(null);
		tree.setBackground(Color.white);

		tree.setCellRenderer(new UserIconRenderer());

		addAllUsers();

		TreePath treePath = tree.getPathForRow(0);
		tree.fireTreeExpanded(treePath);
	}
",2021-02-23 16:11:11.829216,2021-02-23 16:11:11.829216
58,35553791,createServerChooser,,"
 
 	public void createServerChooser() {

		MainMenuBar mainMenuBar = MainMenuBar.getInstance();

		int nodeId = dbMgr.getNodeId((String) cbNE.getSelectedItem());

		DownloadFileChooser downloadFile = new DownloadFileChooser(nodeId, DBDataDesc.SHELF_OLT1, tfFileName, tfFileNameOnly);
		mainMenuBar.putCommand((Object) downloadFile);
		downloadFile.setViewId(mainMenuBar.getViewId());
		downloadFile.setVisible(true);
	}
",2021-02-23 16:11:11.848696,2021-02-23 16:11:11.848696
59,23014476,addRotation,,"
 
     public void addRotation(Vector3f axis, Angle rotation) {
        Quaternion q = new Quaternion(rotation, axis);
        Matrix result = new Matrix(4, 4);
        Matrix quaternion = q.getRotationMatrix();
       
        Matrix.multiply(matrix,q.getRotationMatrix(), result);
        matrix = result;
    }
",2021-02-23 16:11:11.87656,2021-02-23 16:11:11.87656
60,50891793,testSetExample,,"
 
     public void testSetExample() {
        System.out.println(""testSetExample"");
        testString = ""<tag:foo>\n"";
        testString += ""\t<tag:bar />"";
        testString += ""</tag:foo>"";
        tag.setExample(testString);
        assertEquals( tag.getExample(), testString );
    }
",2021-02-23 16:11:11.896859,2021-02-23 16:11:11.896859
61,46026508,saveSetting,,"
 
 	private void saveSetting(CustomProperties prop) {
		prop.setProperty(""avalanchefever.gametype"", mapSet);
		prop.setProperty(""avalanchefever.outlinetype"", outlinetype);
		prop.setProperty(""avalanchefever.numcolors"", numColors);
		prop.setProperty(""avalanchefever.version"", version);
		prop.setProperty(""avalanchefever.chainDisplayType"", chainDisplayType);
		prop.setProperty(""avalanchefever.bigDisplay"", bigDisplay);
	}
",2021-02-23 16:11:11.914079,2021-02-23 16:11:11.914079
62,40776207,process,,"
 
 	public void process(WorkerIsReadyMessageHandle handle, ServiceManager serviceManager) {
		WorkerIsReadyProcessorRequestTO to = new WorkerIsReadyProcessorRequestTO();
		ServiceID workerID = serviceManager.getSenderServiceID();
		
		to.setWorkerAddress(workerID.toString());
		to.setWorkerContainerID(workerID.getContainerID().toString());
		
		OurGridRequestControl.getInstance().execute(to, serviceManager);
	}
",2021-02-23 16:11:11.932137,2021-02-23 16:11:11.932137
63,40778768,configBalanceRanking,,"
 
 	private void configBalanceRanking(List<IResponseTO> responses, String filePath) {
		
		PeerDAOFactory.getInstance().getAccountingDAO().loadBalancesRanking(filePath);
		long frequence = AccountingConstants.RANKING_SAVING_FREQ;

		ScheduleActionWithFixedDelayResponseTO to = new ScheduleActionWithFixedDelayResponseTO();
		to.setActionName(PeerConstants.SAVE_ACCOUNTING_ACTION_NAME);
		to.setDelay(frequence);
		to.setTimeUnit(TimeUnit.SECONDS);
		
		responses.add(to);
	}
",2021-02-23 16:11:11.949625,2021-02-23 16:11:11.949625
64,23286083,getScopePartnerLinks,,"
 
 	public EList getScopePartnerLinks(final EObject process) {
		TreeIterator contents = process.eAllContents();
		EList results = new BasicEList();
		
		while (contents.hasNext()) {
			EObject obj = (EObject) contents.next();
			
			if (obj instanceof Scope) {
				results.addAll(((Scope) obj).getPartnerLinks().getChildren());
			}	
		}
		return results;
	}
",2021-02-23 16:11:11.980189,2021-02-23 16:11:11.980189
65,19466347,addBasePropertyDescriptor,,"
 
 	protected void addBasePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_AddressedVariable_base_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_AddressedVariable_base_feature"", ""_UI_AddressedVariable_type""),
				 TaskingPackage.Literals.ADDRESSED_VARIABLE__BASE,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:11.999442,2021-02-23 16:11:11.999442
66,19466669,addParentEventNamePropertyDescriptor,,"
 
 	protected void addParentEventNamePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_Command_ParentEventName_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_Command_ParentEventName_feature"", ""_UI_Command_type""),
				 Il1Package.Literals.COMMAND__PARENT_EVENT_NAME,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:12.017897,2021-02-23 16:11:12.017897
67,19475841,addFixedPropertyDescriptor,,"
 
 	protected void addFixedPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_UMLBClass_fixed_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_UMLBClass_fixed_feature"", ""_UI_UMLBClass_type""),
				 UMLBPackage.Literals.UMLB_CLASS__FIXED,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:12.038276,2021-02-23 16:11:12.038276
68,19498280,test_10_bug2689872,,"
 
 	public void test_10_bug2689872() throws Exception {
		E con = getGeneric().createElement(""elt"");

		getGeneric().addPredicates(con, makeSList(""A1""), makeSList(""0/=1""), false);
	
		getGeneric().save(con);
		
		runBuilder();
		
		SCE file = getGeneric().getSCElement(con);
		
		getGeneric().containsPredicates(file, emptyEnv, makeSList(), makeSList());
		
		hasMarker(getGeneric().getPredicates(con)[0],
				EventBAttributes.PREDICATE_ATTRIBUTE,
				ParseProblem.LexerError,
				""/""
				);
	}
",2021-02-23 16:11:12.062445,2021-02-23 16:11:12.062445
69,19498298,testOccThm,,"
 
 	public void testOccThm() throws Exception {

		final IContextRoot context =
				ResourceUtils.createContext(rodinProject, CTX_BARE_NAME, CST_1DECL_1REF_THM);

		final IConstant cst1 = context.getConstant(INTERNAL_ELEMENT1);
		final IDeclaration declCst1 = newDecl(cst1, CST1);
		
		final IAxiom thm = context.getAxiom(INTERNAL_ELEMENT1);
		final IOccurrence occRef = makeRefPred(thm, 9, 13, declCst1);


		final BridgeStub tk = new BridgeStub(context);

		final ContextIndexer indexer = new ContextIndexer();

		assertTrue(indexer.index(tk));

		tk.assertOccurrencesOtherThanDecl(cst1, occRef);
	}
",2021-02-23 16:11:12.088215,2021-02-23 16:11:12.088215
70,19505695,getRodinDBStatus,,"
 
 	public IRodinDBStatus getRodinDBStatus() {
		IStatus status = this.getStatus();
		if (status instanceof IRodinDBStatus) {
			return (IRodinDBStatus) status;
		} else {
			// A regular IStatus is created only in the case of a CoreException.
			// See bug 13492 Should handle RodinDBExceptions that contains
			// CoreException more gracefully
			return new RodinDBStatus(this.nestedCoreException);
		}
	}
",2021-02-23 16:11:12.114133,2021-02-23 16:11:12.114133
71,19507414,testMoveRFWithNullContainer,,"
 
 	public void testMoveRFWithNullContainer() throws CoreException {
		IRodinFile rfSource = createRodinFile(""/P/X.test"");
		try {
			rfSource.move(null, null, null, false, null);
		} catch (IllegalArgumentException iae) {
			return;
		}
		assertTrue(""Should not be able to move a rf to a null container"", false);
	}
",2021-02-23 16:11:12.134657,2021-02-23 16:11:12.134657
72,19507735,testOneTwoThreeCreateCycle,,"
 
 	public void testOneTwoThreeCreateCycle() throws Exception {
		IRodinFile ctx = createRodinFile(""P/x.ctx"");
		createDependency(ctx, ""y"");
		createData(ctx, ""one"");
		ctx.save(null, true);
		runBuilder();
		
		IRodinFile cty = createRodinFile(""P/y.ctx"");
		createDependency(cty, ""x"");
		createData(cty, ""two"");
		cty.save(null, true);		
		
		IRodinFile ctz = createRodinFile(""P/z.ctx"");
		createData(ctz, ""three"");
		ctz.save(null, true);
	
		runBuilder(
				""CSC extract /P/x.ctx"",
				""CSC run /P/x.csc"",
				""CSC extract /P/y.ctx"",
				""CSC extract /P/z.ctx"",
				""CSC run /P/z.csc""
		);
	}
",2021-02-23 16:11:12.154131,2021-02-23 16:11:12.154131
73,23010239,addAssignementPropertyDescriptor,,"
 
 	protected void addAssignementPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_AbstractEdge_Assignement_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_AbstractEdge_Assignement_feature"", ""_UI_AbstractEdge_type""),
				 TaEditorPackage.Literals.ABSTRACT_EDGE__ASSIGNEMENT,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:12.17164,2021-02-23 16:11:12.17164
74,47479282,getAllSourceRoots,,"
 
 	public Set getAllSourceRoots(String pluginName, Version pluginVersion) {
		Set pluginSourceRoots = new HashSet();
		ManifestElement[] manifestElements = getSourceEntries(pluginName, pluginVersion);
		if (manifestElements != null) {
			for (int j = 0; j < manifestElements.length; j++) {
				ManifestElement currentElement = manifestElements[j];
				addSourceRoots(currentElement.getDirective(""roots""), pluginSourceRoots); //$NON-NLS-1$
			}
		}
		return pluginSourceRoots;
	}
",2021-02-23 16:11:12.190814,2021-02-23 16:11:12.190814
75,18354735,invalidateSession,,"
 
    public void invalidateSession(String uid, String sid) {
      cat.debug(""==> invalidateSession(""+String.valueOf(uid)+"", ""+String.valueOf(sid)+"")"");

      synchronized (lock) {
         uid2sid.remove(uid);
         sid2ssc.remove(sid);
         sid2ttl.remove(sid);
      }

      cat.debug(""<== invalidateSession()"");
   }
",2021-02-23 16:11:12.208357,2021-02-23 16:11:12.208357
76,43419611,saveCRCReply,,"
 
 	private void saveCRCReply(ClientRemoteContainerReply crcReply) {
		
		LoadService.currentlyWritingFile = true;
		String mySavingPath = LoadService.SERVICE_NODE_DESCRIPTION_FILE;
		try {
			ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(mySavingPath));
			out.writeObject(crcReply);
			out.flush();
			out.close();
			
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		LoadService.currentlyWritingFile = false;
	}
",2021-02-23 16:11:12.224804,2021-02-23 16:11:12.224804
77,11759898,markStart,,"
 
 	public void markStart(Object tag) {
		synchronized (pair2startTimeMap) {
			pair2startTimeMap.put(tag, clock.getCurrentTime());
			// FIXME it probably makes more sense to run the garbage collection
			// periodically instead of allocating the timer every time
			Timer removalTimer = clock.createNewTimer();
			removalTimer.addTimerListener(new GarbageCollectionTimerListener(tag));
			removalTimer.schedule(Time.inMilliseconds(maxWait));
		}
	}
",2021-02-23 16:11:12.24204,2021-02-23 16:11:12.24204
78,3456415,testLogin,,"
 
     public void testLogin() {
    	
		SessionManager manager = new SimpleSessionManager();
		String sessionId = manager.createSession( null, null);
		
		Session session = manager.getSession( sessionId );
		
		manager.login(session, ""user"", ""password"");
		
		assertEquals(""user"", session.getUserId());
		assertEquals(""password"", session.getUserPassword());
		assertTrue( session.isLoggedIn() );
    }
",2021-02-23 16:11:12.261842,2021-02-23 16:11:12.261842
79,3457090,createNewServerProcess,,"
 
 	protected void createNewServerProcess( Socket socket ){
		logger.info( ""Received connection on port "" + getPort() + "" from ["" + socket.getInetAddress() + "":""+ socket.getPort() + ""]."");
		
		Thread t = new Thread( getNewServerProcess(socket) );
		t.start();
		getServerProcesses().add( t );
		new Thread( new Monitor( t ) ).start();
	}
",2021-02-23 16:11:12.28066,2021-02-23 16:11:12.28066
80,11950130,testGetCodigo,,"
 
     public void testGetCodigo() {
        System.out.println(""getCodigo"");
        
        Cronograma instance = null;
        
        String expResult = """";
        String result = instance.getCodigo();
        assertEquals(expResult, result);
        
        // TODO review the generated test code and remove the default call to fail.
        fail(""The test case is a prototype."");
    }
",2021-02-23 16:11:12.299758,2021-02-23 16:11:12.299758
81,1046788,testAddCountryWithSequenceGenerator,,"
 
 	public void testAddCountryWithSequenceGenerator() throws Exception {
		CountryWithSequence country1 = new CountryWithSequence();
		country1.setCountryId(""KR"");
		country1.setCountryName(""Korea"");

		Integer countryCode = (Integer) session.save(country1);
		assertEquals(""fail to generate a new countryCode."", 0, countryCode
				.intValue());
		assertNotNull(""fail to add a new country with sequence generator."",
				countryCode);
	}
",2021-02-23 16:11:12.31725,2021-02-23 16:11:12.31725
82,26285656,testValidateSeparationCount,,"
 
     public void testValidateSeparationCount() {
        try {
            LinearDimension.validateSeparationCount(0);
            fail();
        } catch (IllegalArgumentException ex) {
            // ok
        }

        try {
            LinearDimension.validateSeparationCount(-2);
            fail();
        } catch (IllegalArgumentException ex) {
            // ok
        }

        LinearDimension.validateSeparationCount(1);
        LinearDimension.validateSeparationCount(2988);
    }
",2021-02-23 16:11:12.333882,2021-02-23 16:11:12.333882
83,20687719,getConnectionPanel,,"
 
 	private JPanel getConnectionPanel() {
		if (connectionPanel == null) {
			connectionRoomLabel = new JLabel();
			connectionRoomLabel.setText(""Playground"");
			connectionPanel = new JPanel();
			connectionPanel.setLayout(new BoxLayout(getConnectionPanel(), BoxLayout.X_AXIS));
			connectionPanel.add(getConnectionsButton(), null);
			connectionPanel.add(connectionRoomLabel, null);
		}
		return connectionPanel;
	}
",2021-02-23 16:11:12.351522,2021-02-23 16:11:12.351522
84,11298083,toString,,"
 
     public String toString() {
        String operationString = (operation.getPrefix() != null && !operation.getPrefix().equals(emptyString) ? operation.getPrefix() + "":"" + operation.getLocalPart() : operation.getLocalPart());
        return ""wsdl.bindingOperation("" + binding + ""/"" + operationString + "")"";
    }
",2021-02-23 16:11:12.375757,2021-02-23 16:11:12.375757
85,16958722,indexToLetter,,"
 
 	public String indexToLetter(int index) {
		if (index == 0)
			return ""a"";
		else if (index == 1)
			return ""b"";
		else if (index == 2)
			return ""c"";
		else if (index == 3)
			return ""d"";
		else if (index == 4)
			return ""e"";
		else if (index == 5)
			return ""f"";
		else if (index == 6)
			return ""g"";
		else if (index == 7)
			return ""h"";
		else if (index == 8)
			return ""i"";
		else if (index == 9)
			return ""j"";
		else
			return null;
	}
",2021-02-23 16:11:12.392649,2021-02-23 16:11:12.392649
86,33793341,testDeleteFornecedor,,"
 
     public void testDeleteFornecedor() {
        /*System.out.println(""deleteFornecedor"");
        Integer id = 151;
        FornecedorDAO instance = new FornecedorDAO();
        instance.deleteFornecedor(id);
        // TODO review the generated test code and remove the default call to fail.
        assertNull(instance.getFornecedor(id));*/
    }
",2021-02-23 16:11:12.412332,2021-02-23 16:11:12.412332
87,29852582,genSql,,"
 
   public void genSql() throws PositionedError {
    try {
      SqlcPrettyPrinter         spp;

      spp = new SqlcPrettyPrinter(ref.getFile());
      spp.printCUnit(elems);
      spp.close();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      System.err.println(""cannot write: "" + ref.getFile());
    }
  }
",2021-02-23 16:11:12.42956,2021-02-23 16:11:12.42956
88,29854794,genIdents,,"
 
   public JExpression genIdents() {
    TokenReference	ref = getTokenReference();
    JExpression[]	init = new JExpression[codes.length];

    for (int i = 0; i < codes.length; i++) {
      init[i] = new JStringLiteral(ref, codes[i].getIdent());
    }
    return VKUtils.createArray(ref, CStdType.String, init);
  }
",2021-02-23 16:11:12.445943,2021-02-23 16:11:12.445943
89,29859244,split,,"
 
   private List split(String line) {
    List                result;

    if (line == null) {
      result = new ArrayList();
    } else {
      StringTokenizer     tok;

      tok = new StringTokenizer(line, "","");
      result = new ArrayList(tok.countTokens());

      while(tok.hasMoreTokens()) {
        result.add(tok.nextToken());
      }
    }

    return result;
  }
",2021-02-23 16:11:12.462626,2021-02-23 16:11:12.462626
90,33718481,testGetEmail,,"
 
     public void testGetEmail() {
        System.out.println(""getEmail"");
        

        
        String expResult = """";
        String result = instance.getEmail();
        assertEquals(expResult, result);
        
        // TODO review the generated test code and remove the default call to fail.
      //  fail(""The test case is a prototype."");
    }
",2021-02-23 16:11:12.479665,2021-02-23 16:11:12.479665
91,33719114,testSetEvtID,,"
 
     public void testSetEvtID() {
        System.out.println(""setEvtID"");
        
        String evtID = """";
        Email_DBImpl instance = new Email_DBImpl();
        
        instance.setEvtID(evtID);
        
        // TODO review the generated test code and remove the default call to fail.
        fail(""The test case is a prototype."");
    }
",2021-02-23 16:11:12.496632,2021-02-23 16:11:12.496632
92,33719117,testSetChkEvtID,,"
 
     public void testSetChkEvtID() {
        System.out.println(""setChkEvtID"");
        
        String ChkEvtID = """";
        Email_DBImpl instance = new Email_DBImpl();
        
        instance.setChkEvtID(ChkEvtID);
        
        // TODO review the generated test code and remove the default call to fail.
        fail(""The test case is a prototype."");
    }
",2021-02-23 16:11:12.512746,2021-02-23 16:11:12.512746
93,33719118,testGetEvtIDs,,"
 
     public void testGetEvtIDs() {
        System.out.println(""getEvtIDs"");
        
        Email_DBImpl instance = new Email_DBImpl();
        
        String[] expResult = null;
        String[] result = instance.getEvtIDs();
        assertEquals(expResult, result);
        
        // TODO review the generated test code and remove the default call to fail.
        fail(""The test case is a prototype."");
    }
",2021-02-23 16:11:12.529148,2021-02-23 16:11:12.529148
94,33719607,testGetClassification,,"
 
     public void testGetClassification() {
        System.out.println(""getClassification"");
        
        SystemClient_DBImpl instance = new SystemClient_DBImpl();
        
        Set expResult = null;
        Set result = instance.getClassification();
        assertEquals(expResult, result);
        
        // TODO review the generated test code and remove the default call to fail.
        fail(""The test case is a prototype."");
    }
",2021-02-23 16:11:12.54542,2021-02-23 16:11:12.54542
95,33719869,testSetWelcomeMsg,,"
 
     public void testSetWelcomeMsg() {
        System.out.println(""setWelcomeMsg"");
        
        String welcomeMsg = """";
        SystemClient_DBImpl instance = new SystemClient_DBImpl();
        
        instance.setWelcomeMsg(welcomeMsg);
        
        // TODO review the generated test code and remove the default call to fail.
        fail(""The test case is a prototype."");
    }
",2021-02-23 16:11:12.563082,2021-02-23 16:11:12.563082
96,18418213,showLatestPlan,,"
 
 	public String showLatestPlan() {
		
		// clear previous protocols
        mCurrPlanProt = null;
		
	
		try {
			PatientController han = new PatientController(mCurrPatient);
			NutPlan plan = han.getLatestNutritionPlan();
			NutritionController controller = NutritionController.editPlan(plan);

			mCurrPlanProt = WebPlanProtocol.createPlan(controller, plan, mCurrPatient);
			return ""success"";

		} catch (Exception e) {
			e.printStackTrace();
		}
		return ""failure"";
	}
",2021-02-23 16:11:12.59054,2021-02-23 16:11:12.59054
97,18420500,getUnitCombo,,"
 
 	private JComboBox getUnitCombo() {
		if (m_UnitCombo == null) {
			m_UnitCombo = new JComboBox();
			m_UnitCombo.setBounds(87, 83, 125, 22);
			m_UnitCombo.setModel(getUnitComboModel());
            if (m_FreePara.getUnit() != null) {
                m_UnitCombo.setSelectedItem(m_FreePara.getUnit());
            }
		}
		return m_UnitCombo;
	}
",2021-02-23 16:11:12.608564,2021-02-23 16:11:12.608564
98,18421665,searchRecipe,,"
 
 	private Recipe searchRecipe (Recipe re) {
		
		Recipe recipe;
		
		for (IngredientAmount iam : re.getIngredients()) {
			if (iam.getFood() instanceof Recipe) {
				if ((Recipe)iam.getFood() == m_ActiveRecipe) {
					return re;
				} else {
					recipe = searchRecipe ((Recipe) iam.getFood());
					
					if (recipe != null) {
						return recipe;
					}
				}
			}			
		}		

		return null;
	}
",2021-02-23 16:11:12.629772,2021-02-23 16:11:12.629772
99,40936756,selectBracketingEntries,,"
 
     protected boolean selectBracketingEntries(final AbsoluteDate date) {
        try {
            // select the bracketing elements
            next     = (TimeStampedEntry) (eop.tailSet(date).first());
            previous = (TimeStampedEntry) (eop.headSet(next).last());
            return true;
        } catch (NoSuchElementException nsee) {
            previous = null;
            next     = null;
            return false;
        }
    }
",2021-02-23 16:11:12.651109,2021-02-23 16:11:12.651109
100,40865212,getBackCommand2,,"
 
     public Command getBackCommand2() {
        if (backCommand2 == null) {//GEN-END:|233-getter|0|233-preInit
            // write pre-init user code here
            backCommand2 = new Command(""OK"", Command.BACK, 0);//GEN-LINE:|233-getter|1|233-postInit
            // write post-init user code here
        }//GEN-BEGIN:|233-getter|2|
        return backCommand2;
    }
",2021-02-23 16:11:12.678211,2021-02-23 16:11:12.678211
101,40865383,getBackCommand12,,"
 
     public Command getBackCommand12() {
        if (backCommand12 == null) {//GEN-END:|264-getter|0|264-preInit
            // write pre-init user code here
            backCommand12 = new Command(""OK"", Command.BACK, 0);//GEN-LINE:|264-getter|1|264-postInit
            // write post-init user code here
        }//GEN-BEGIN:|264-getter|2|
        return backCommand12;
    }
",2021-02-23 16:11:12.694921,2021-02-23 16:11:12.694921
102,40875567,getBackCommand25,,"
 
     public Command getBackCommand25() {
        if (backCommand25 == null) {//GEN-END:|618-getter|0|618-preInit
            // write pre-init user code here
            backCommand25 = new Command(""Back"", Command.BACK, 0);//GEN-LINE:|618-getter|1|618-postInit
            // write post-init user code here
        }//GEN-BEGIN:|618-getter|2|
        return backCommand25;
    }
",2021-02-23 16:11:12.711278,2021-02-23 16:11:12.711278
103,40879350,getOkCommand18,,"
 
     public Command getOkCommand18() {
        if (okCommand18 == null) {//GEN-END:|728-getter|0|728-preInit
            // write pre-init user code here
            okCommand18 = new Command(""LIQUIDEZ"", Command.OK, 0);//GEN-LINE:|728-getter|1|728-postInit
            // write post-init user code here
        }//GEN-BEGIN:|728-getter|2|
        return okCommand18;
    }
",2021-02-23 16:11:12.727969,2021-02-23 16:11:12.727969
104,36356719,setEndpointAddress,,"
 
     public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
        
if (""ProductInformationSOAP"".equals(portName)) {
            setProductInformationSOAPEndpointAddress(address);
        }
        else 
{ // Unknown Port Name
            throw new javax.xml.rpc.ServiceException("" Cannot set Endpoint Address for Unknown Port"" + portName);
        }
    }
",2021-02-23 16:11:12.744818,2021-02-23 16:11:12.744818
105,27907979,atomToExpression,,"
 
 	private String atomToExpression(Atom atom, String name) {

		String expr = name + "" = "";
		
		if (atom instanceof BooleanAtom) {
			BooleanAtom booleanAtom = (BooleanAtom) atom;
			try {
				if(booleanAtom.getBooleanValue())
					expr += ""'T'"";
				else
					expr += ""'F'"";
			} catch (InvalidStateException e) {
				throw new Error(""Thing in invalid boolean state"");
			}
		}
			
		else if (atom instanceof TextAtom)
			expr += ""'"" + atom.getValue() + ""'"";
		else
			expr += atom.getValue();

		return expr;
	}
",2021-02-23 16:11:12.761738,2021-02-23 16:11:12.761738
106,19280843,getInstitutions,,"
 
     public Collection getInstitutions() {
        try {
            if (iInstitutions == null) {
                refreshInstitutions();
                logger.debug(""Institutions were null while getting them. Attempting to refresh."");
            }
            return iInstitutions;
        }
        catch (Exception e) {
            logger.warn(e.getMessage(), e);
            return Collections.EMPTY_LIST;
        }
    }
",2021-02-23 16:11:12.778274,2021-02-23 16:11:12.778274
107,19282261,countQuery,,"
 
     protected int countQuery(final Query query) throws PersistenceException {
        if (query != null)
        {
            if (pride2Broker != null){
                return pride2Broker.getCount(query);
            }
            else {
                throw new PersistenceException(""Query called on uninitialized PersistenceBroker"", null);
            }
        }
        else {
            throw new PersistenceException(""No query specified!"", null);
        }
    }
",2021-02-23 16:11:12.796883,2021-02-23 16:11:12.796883
108,50026101,getRemoteObject,,"
 
   public DBusInterface getRemoteObject(String objectpath) throws DBusException {
    if (null == objectpath) { throw new DBusException(_(""Invalid object path: null"")); }

    if (!objectpath.matches(OBJECT_REGEX) || (objectpath.length() > MAX_NAME_LENGTH)) { throw new DBusException(
        _(""Invalid object path: "") + objectpath); }

    return dynamicProxy(objectpath);
  }
",2021-02-23 16:11:12.815718,2021-02-23 16:11:12.815718
109,43040209,addErrors,,"
 
     public void addErrors(String el, IErrorDescription... error) {
        final IErrorDescription[] msg = errors.get(el);
        // we expect that the main scenario is to add only once errors per property...
        errors.put(el, msg == null ? error : merge(msg, error));
    }
",2021-02-23 16:11:12.834392,2021-02-23 16:11:12.834392
110,43040436,init,,"
 
     private void init() throws CoreException {
        final String name = getClassName();
        final IPackageFragment pkg = getPackage();
        final ICompilationUnit unit = pkg.createCompilationUnit(name + "".java"", """", true, null);
        setUp(unit);
        createMainType(PUBLIC_KEYWORD, pkg.getElementName(), getClassName());
    }
",2021-02-23 16:11:12.853074,2021-02-23 16:11:12.853074
111,34604973,deleteCascade,,"
 
 	public void deleteCascade(VyhladavaciAlgoritmus algorithm) {
		//searcheds
		getHibernateTemplate().bulkUpdate(
		    	""DELETE Searched WHERE algorithm = ?"",
		    	new Object[] { algorithm } );
		//plans
		getHibernateTemplate().bulkUpdate(
		    	""DELETE SearchPlan WHERE algorithm = ?"",
		    	new Object[] { algorithm } );
		//prefs
		getHibernateTemplate().bulkUpdate(
		    	""DELETE SearchPrefs WHERE algorithm = ?"",
		    	new Object[] { algorithm } );
		//categories
		getHibernateTemplate().bulkUpdate(
		    	""DELETE SearchCategory WHERE algorithm = ?"",
		    	new Object[] { algorithm } );
		delete(algorithm);
	}
",2021-02-23 16:11:12.871694,2021-02-23 16:11:12.871694
112,10222579,equals,,"
 
     public boolean equals(Object obj) {
        if (obj == null || (obj.getClass() != getClass())) {
            return false;
        }
        CSSConditionalSelectorImpl s = (CSSConditionalSelectorImpl)obj;
        return (s.simpleSelector.equals(simpleSelector) &&
                s.condition.equals(condition));
    }
",2021-02-23 16:11:12.892371,2021-02-23 16:11:12.892371
113,4453291,exit,,"
 
     public void exit(EventObject event) {
	for (ExitListener listener : exitListeners) {
	    if (!listener.canExit(event)) {
		return;
	    }
	}
	try {
	    for (ExitListener listener : exitListeners) {
		try {
		    listener.willExit(event);
		}
		catch (Exception e) { 
		    logger.log(Level.WARNING, ""ExitListener.willExit() failed"", e);
		}
	    }
	    shutdown();
	}
	catch (Exception e) { 
	    logger.log(Level.WARNING, ""unexpected error in Application.shutdown()"", e);
	}
	finally {
            end();
	}
    }
",2021-02-23 16:11:12.908475,2021-02-23 16:11:12.908475
114,39233866,testInvoke,,"
 
     public void testInvoke() throws Exception {
        transport.setRemoteService(""TravelProcess"");

        call.setOperation(""initiate"");
        call.addParameter(""x"", XMLType.XSD_STRING, ParameterMode.IN);
        call.setReturnType(XMLType.XSD_STRING);

        String result = (String) call.invoke(new Object[] { ""anything"" });

        assertEquals(DUMMY_RESULT, result);
    }
",2021-02-23 16:11:12.92488,2021-02-23 16:11:12.92488
115,26412118,connectionErrorOccurred,,"
 
     public void connectionErrorOccurred(ConnectionEvent event) {
        logger.warn(""Received Connection Error event from a conection in pool "" + info.getName());

        if (info.isRemoveOnExceptions()) {
            checkIn(event.getSource(), true);
            logger.warn(""removeOnExceptions == true, closed connection"");
        }
    }
",2021-02-23 16:11:12.940283,2021-02-23 16:11:12.940283
116,13482891,visitRetStmt,,"
 
     public void visitRetStmt(RetStmt stmt) {
        Set targets = new LinkedHashSet();

        Iterator iter = stmt.sub().paths().iterator();

        while (iter.hasNext()) {
            Block[] path = (Block[]) iter.next();
            targets.add(path[1]);
        }

        targets.addAll(stmt.catchTargets());

        verifyTargets(stmt.block(), targets);

        visitNode(stmt);
    }
",2021-02-23 16:11:12.957033,2021-02-23 16:11:12.957033
117,4280405,getFiles,,"
 
     public List getFiles(FileSet fileSet) {
        List files = new ArrayList();
        String[] names = fileSet.getDirectoryScanner(project).getIncludedFiles();

        for (int i = 0; i < names.length; i++) {
            String name = names[i];
            files.add(new File(fileSet.getDir(project), name));
        }

        return files;
    }
",2021-02-23 16:11:12.975725,2021-02-23 16:11:12.975725
118,38184555,wndPreferences,,"
 
     public void wndPreferences() {
        log.entering(""MainWindow"",""wndPreferences"");
        PropertiesDlg propDlg = new PropertiesDlg(this);
        propDlg.setModal(true);
        propDlg.setVisible(true);
        log.exiting(""MainWindow"",""wndPreferences"");
    }
",2021-02-23 16:11:12.99147,2021-02-23 16:11:12.99147
119,48861766,addRelativeHeaders,,"
 
 	private void addRelativeHeaders(Response response, int timeInSeconds) {
		response.setHeader(CACHE_CONTROL_HEADER, String.format(""max-age=%d"", timeInSeconds));
		Calendar expires = Calendar.getInstance();
		expires.add(Calendar.SECOND, timeInSeconds);
		response.setHeader(""Expires"", DATE_FORMAT.format(expires));
	}
",2021-02-23 16:11:13.013368,2021-02-23 16:11:13.013368
120,21359951,show,,"
 
         public void show(Contact contact) {
            logger.fine(""Showing edit contact dialog for contact: "" + contact);
            this.contact = contact;
            init();
            setLocationRelativeTo(Context.mainFrame);
            optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
            panel.setContact(contact);
            panel.prepareForShow();
            setVisible(true);
        }
",2021-02-23 16:11:13.02959,2021-02-23 16:11:13.02959
121,45147874,clearFieldersFromField,,"
 
   public void clearFieldersFromField() {
    // clear all fielders from field
    for (int i = 0; i < boardXDimension; i++) {
      for (int j = 0; j < boardYDimension; j++) {
        for (int a = 0; a < boardZDimension; a++) {
          cricketFieldPositions[i][j][a] = 0;
        }
      }
    }
  }
",2021-02-23 16:11:13.049621,2021-02-23 16:11:13.049621
122,45888514,openCursor,,"
 
 	public Cursor openCursor(Context context, String selection, String[] selectionArgs) {
		if(mSourcesUri==null) {
			throw new NullPointerException(""Sources uri not set."");
		}
		return context.getContentResolver().query(mSourcesUri, mProjection, selection, selectionArgs, Sources.SourcesTable.NAME);
	}
",2021-02-23 16:11:13.072545,2021-02-23 16:11:13.072545
123,45891169,removeView,,"
 
 	public void removeView(StateViewSmall view) {
		view.setVisible(false);
		// remove from scenario
		int removedPosition = indexOfView(view);
		mScenarioPanel.remove(removedPosition);
		// take care of the big (detailed) view
		if (mCurrentSmallView != null && mCurrentSmallView.equals(view)) {
			mCurrentBigView.setVisible(false);
			mCurrentBigView = null;
			mCurrentSmallView = null;
		}
		// compute the new number of pixels per scenario position
		mTimeBar.scaleNumberOfPixelsPerPosition();
		refresh();
	}
",2021-02-23 16:11:13.089011,2021-02-23 16:11:13.089011
124,31696447,testNegativeParseCases,,"
 
   public void  testNegativeParseCases() {
    verbose(""--->Negative parse tests  START"");
    for (int i = 0; i < negativeParseTests.length; i++) {
      parseFilter(negativeParseTests[i], false);
    }
    
    // 
    // This used to fail until the parser was rewritten with the stack
    // stuff so that it can clean up partially parsed expression trees.
    checkDelete();

  }
",2021-02-23 16:11:13.105691,2021-02-23 16:11:13.105691
125,22618655,getGlobalElements,,"
 
 	private void getGlobalElements(Document doc, File file) {
		if (doc == null) {
			return;
		}
		List list = doc.selectNodes(""/xsd:schema/xsd:element"");
		for (Iterator iter = list.iterator(); iter.hasNext(); ) {
			Element element = (Element) iter.next();
			String name = element.attributeValue(""name"");
			GlobalElement g = new GlobalElement(element, file);
			// System.out.println (g.toString());
			try {
				globalDefMap.setValue(name, g);
			}  catch (Exception e) {
				prtln (e.getMessage());
			}
		}
	}
",2021-02-23 16:11:13.122361,2021-02-23 16:11:13.122361
126,22620483,getLabelText,,"
 
 	public String getLabelText(String xpath, String siblingPath, String indexId) {
		if (siblingPath != null && indexId != null) {
			String nodeName =
				NamespaceRegistry.stripNamespacePrefix(XPathUtils.getNodeName(siblingPath));
			return (nodeName + "" ${"" + indexId + ""+1}"");
		}
		else {
			String nodeName =
				NamespaceRegistry.stripNamespacePrefix(XPathUtils.getNodeName(normalizedXPath));
			return nodeName;
		}
	}
",2021-02-23 16:11:13.138269,2021-02-23 16:11:13.138269
127,22622479,getStatusFlagFields,,"
 
 	private List getStatusFlagFields() {
		List list = new ArrayList();
		String statusFlagPath = ""/collectionConfigRecord/statusFlags/statusFlag/status"";
		for (Iterator i = im.getInputFields().iterator(); i.hasNext(); ) {
			InputField field = (InputField) i.next();
			// prtln (field.toString());
			if (field.getNormalizedXPath().startsWith(statusFlagPath)) {
				list.add(field);
			}
		}
		return list;
	}
",2021-02-23 16:11:13.154936,2021-02-23 16:11:13.154936
128,22624602,asMap,,"
 
 		public Map asMap() {
			Map map = new HashMap();
			// map.put (""org_id"", org_id);
			map.put(""startDate"", start_date);
			map.put(""endDate"", end_date);
			if (this.organization != null)
				map.put(""organization"", this.organization.acronym);
			map.put(""type"", (this.isVisitor() ? ""Visitor"" : ""Employee""));
			// return new JSONObject (map);
			return map;
		}
",2021-02-23 16:11:13.170613,2021-02-23 16:11:13.170613
129,22625582,setUrls,,"
 
 	public void setUrls(String[] theUrls) throws IllegalStateException {
		if (xmlProcessed)
			throw new IllegalStateException(illegalPostProssingMsg);
		
		if(theUrls != null) {
			this.urls = new String [theUrls.length];
			for(int i = 0; i < theUrls.length; i++)
				this.urls[i] = UrlHelper.normalize(theUrls[i]);
		}
		else
			this.urls = urls;
	}
",2021-02-23 16:11:13.186678,2021-02-23 16:11:13.186678
130,22626628,toString,,"
 
 	public String toString() {
		StringBuffer ret = new StringBuffer();
		ret.append(""format: "");
		ret.append(format);
		ret.append("" directory: "");
		Object[] attributeKeys = attributes.keySet().toArray();
		for (int i = 0; i < attributeKeys.length; i++)
			ret.append(""\n attribute: "" + attributeKeys[i].toString());
		return ret.toString();
	}
",2021-02-23 16:11:13.203471,2021-02-23 16:11:13.203471
131,22628734,setTopAttributes,,"
 
 	private void setTopAttributes( Attributes from ) {
		for ( int i = 0; i < from.getLength(); i++ ) {
			topMenu.setAttribute( from.getLocalName( i ), from.getValue( i ) );
			topMenu.setAttribute( from.getQName( i ), from.getValue( i ) );
		}
	}
",2021-02-23 16:11:13.219948,2021-02-23 16:11:13.219948
132,7957602,print,,"
 
 		protected void print() {
			System.out.println(""Print for "" + prototype + ""------------------"");

			cfg.visit(new PrintVisitor() {
				Phi phi = null;

				public void visitBlock(final Block block) {
					phi = exprPhiAtBlock(block);
					super.visitBlock(block);
				}

				public void visitLabelStmt(final LabelStmt stmt) {
					super.visitLabelStmt(stmt);

					if (stmt.label().startsBlock()) {
						if (phi != null) {
							println(phi);
							phi = null;
						}
					}
				}
			});

			System.out.println(""End Print ----------------------------"");
		}
",2021-02-23 16:11:13.236711,2021-02-23 16:11:13.236711
133,31203037,addToTechnicalComment,,"
 
     public void addToTechnicalComment( final String add_to_technical_comment ) {
        if ( getTechnicalComment() != null
        &&   getTechnicalComment().length() > 0 ) {
            setTechnicalComment( getTechnicalComment()
                                 + ""\n"" + add_to_technical_comment );
        }
        else {
            setTechnicalComment( add_to_technical_comment );
        }
    }
",2021-02-23 16:11:13.255663,2021-02-23 16:11:13.255663
134,31203138,setAdditionalSeqsOids,,"
 
     public void setAdditionalSeqsOids( int[] add_seq_oids ) {

        _add_seq_oids = new ArrayList();

        if ( add_seq_oids == null ) {
            return;
        }

        for ( int i = 0; i < add_seq_oids.length; ++i ) {
            addAdditionalSeqsOid( add_seq_oids[ i ] );
        }

    } // setAddSegsOids( int[] )
",2021-02-23 16:11:13.272383,2021-02-23 16:11:13.272383
135,42843931,put,,"
 
 		public FieldContent put(Item item){
			FieldContent old_field = this.content;
			
			if (item.getUid() == this.content.getItem().getUid()) {
				if (content.getItem().isStackable()){ 
					this.content = new InventoryStack(content.getItem(), content.getCount()+1);
					return null;
				} else {this.content = new InventoryItem(item); return old_field;}
			} else {
				this.content = new InventoryItem(item); return old_field;
			}
		}
",2021-02-23 16:11:13.288327,2021-02-23 16:11:13.288327
136,17121898,compareTo,,"
 
   public int compareTo(TPoint o) {
    if ((this.value == o.value()) && (this.tstamp == o.tstamp())) {
      return 0;
    }
    else if (this.tstamp > o.tstamp) {
      return 1;
    }
    else if (this.tstamp < o.tstamp) {
      return -1;
    }
    else if (this.value > o.value) {
      return 1;
    }
    return -1;
  }
",2021-02-23 16:11:13.308597,2021-02-23 16:11:13.308597
137,40099556,removeSelection,,"
 
     public void removeSelection(IEntity selection) {

        // Assertions.
        if (selection == null) {
            String msg = ""Argument 'selection' cannot be null."";
            throw new IllegalArgumentException(msg);
        }
        
        entitySel.remove(selection.getEntityId());
        if(selection.getType().equals(EntityType.MEMBER)){          
            memberCount--;
        }else{
            groupCount--;
        }
        
    }
",2021-02-23 16:11:13.325697,2021-02-23 16:11:13.325697
138,33993860,addIconPropertyDescriptor,,"
 
 	protected void addIconPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_ButtonWidget_icon_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_ButtonWidget_icon_feature"", ""_UI_ButtonWidget_type""),
				 UiPackage.Literals.BUTTON_WIDGET__ICON,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:13.341989,2021-02-23 16:11:13.341989
139,33993930,addMultiSelectionPropertyDescriptor,,"
 
 	protected void addMultiSelectionPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_TableWidget_multiSelection_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_TableWidget_multiSelection_feature"", ""_UI_TableWidget_type""),
				 UiPackage.Literals.TABLE_WIDGET__MULTI_SELECTION,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:13.35876,2021-02-23 16:11:13.35876
140,33994017,addColumnsPropertyDescriptor,,"
 
 	protected void addColumnsPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_TableLayoutGroup_columns_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_TableLayoutGroup_columns_feature"", ""_UI_TableLayoutGroup_type""),
				 UiPackage.Literals.TABLE_LAYOUT_GROUP__COLUMNS,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:13.375571,2021-02-23 16:11:13.375571
141,37824224,notifyProgressListeners,,"
 
    protected void notifyProgressListeners() {
      Enumeration enum = m_prProgressListeners.elements();
      ProgressListener thisListener = null;
      while( enum.hasMoreElements() ) {
         thisListener = (ProgressListener)enum.nextElement();
         thisListener.progressStateChanged( m_prUpgradeProgress );
      }
   } // notifyProgressListeners()
",2021-02-23 16:11:13.394439,2021-02-23 16:11:13.394439
142,34599430,setSigmaRx,,"
 
 	public void setSigmaRx( double newSigmaRx) throws IllegalArgumentException, DimensionMismatchException {
		if (this.dimension != 6)
			throw new DimensionMismatchException(this.dimension + ""D-Punkt hat keine X-Drehung"");
		if (newSigmaRx>0)
			this.sigmaRx = newSigmaRx;
		else
			throw new IllegalArgumentException(""Standardabweichung muss groesser Null sein "" + newSigmaRx);
	}
",2021-02-23 16:11:13.410749,2021-02-23 16:11:13.410749
143,26493872,resolveValue,,"
 
   protected String resolveValue(MagnetContext aContext, String aValue) throws RenderingException {
    try {
      if (aValue == null) {
        return null;
      } else {
        TemplateElementIF aTemplate = _theTemplateFactory.parse(aValue);
        return aTemplate.render(aContext);
      }
    } catch (TemplateException te) {
      throw new RenderingException(""Unable to resolve the value "" + aValue, te);
    }
  }
",2021-02-23 16:11:13.42731,2021-02-23 16:11:13.42731
144,26494825,resolve,,"
 
   public List resolve(Map defs) throws ConfigurationException {
    if(_id == null) {
      throw new ConfigurationException(
          ""'id' attribute not set on advice group reference"");
    }

    Group group = (Group) defs.get(_id);

    if(group == null) {
      throw new ConfigurationException(""No advice group matches ID: "" + _id);
    }

    return group.getAdvices();
  }
",2021-02-23 16:11:13.444957,2021-02-23 16:11:13.444957
145,26501411,doOutput,,"
 
   protected void doOutput(int lvl, Object message, Throwable t) {
    System.out.print(""["");
    System.out.print(_taskName);
    System.out.print("" - "");
    System.out.print(LEVEL[lvl]);
    System.out.print(""]"");
    System.out.println(message);

    if(t != null) {
      t.printStackTrace();
    }
  }
",2021-02-23 16:11:13.461984,2021-02-23 16:11:13.461984
146,29572299,listen,,"
 
 	public void listen() throws IOException {
		logMessage(""Server started at "" + this.getHostname() + "":"" + this.getPort());
		while (true) {
			Socket socket = serverSocket.accept();
			logMessage(socket.getInetAddress().getCanonicalHostName() + ""has made a connection !"");
			logMessage(""Creating new listener"");
			ListenThread task = new ListenThread(socket,this);
			logMessage(""Adding new totemcontrolcomhandler"");
			addHandlers(task);
			Thread listener = new Thread(task);
			logMessage(""Starting new thread"");
			listener.run();
		}
	}
",2021-02-23 16:11:13.477765,2021-02-23 16:11:13.477765
147,19344442,loadSystems,,"
 
 	private void loadSystems() {
		int i, num;
		SystemItem dtls;

		systemCombo.removeAllItems();

		systemCombo.addItem(""<All>"");

		dbLink = true;
		try {
			systems = copyBookInterface.getSystems();
		} catch (Exception ex) {
			if (message != null) {
				message.setText(ex.getMessage());
				message.setCaretPosition(1);
			}
			ex.printStackTrace();
			systems = new ArrayList<SystemItem>();
			dbLink = false;
		}

		num = systems.size();
		for (i = 0; i < num; i++) {
			dtls = systems.get(i);
			systemCombo.addItem(dtls.description);
		}

	}
",2021-02-23 16:11:13.493634,2021-02-23 16:11:13.493634
148,19344536,setCombo_Value,,"
 
   public void setCombo_Value(String val) {

      if ((val == null || """".equals(val))
      && (Combo_Value == null || """".equals(Combo_Value))) {
          return;
      }

      if ((val == null) || (! val.equals(Combo_Value)) || (updateStatus == NULL_INT_VALUE)) {
           Combo_Value = val;
           updateStatus = UPDATED;
      }
  }
",2021-02-23 16:11:13.508742,2021-02-23 16:11:13.508742
149,19346491,checkSetLayout,,"
 
     private void checkSetLayout(int layout, String field) {

        filter.setLayoutIndex(layout);
        assertEquals(""The layout Index was "" + filter.getLayoutIndex()
                + "" and not "" + layout, layout, filter.getLayoutIndex());

        String fld = fieldList.getValueAt(1, 0).toString();
        assertEquals(""Expected field '"" + field + ""' but got "" + fld,
                field, fld);
    }
",2021-02-23 16:11:13.524398,2021-02-23 16:11:13.524398
150,48209810,setButtonText,,"
 
 	private void setButtonText() {
		String txt = menuItem.getTitle() + "" (""
				   + menuItem.getStock()
				   + "" in Stock)"";
		try {
			Course tmpCourse = (Course)menuItem;
			if(tmpCourse.getCourseType() == Course.FIRST_COURSE) {
				txt = ""1st: "" + txt;
			} else {
				txt = ""2nd: "" + txt;
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		this.setText(txt);
	}
",2021-02-23 16:11:13.542521,2021-02-23 16:11:13.542521
151,24245709,fetchString,,"
 
 	protected String fetchString(int register, int len) {
		int ret = getData(register, byteBuff, 8);
		char [] charBuff = new char[len];
		for(int i=0;i<len;i++)
			charBuff[i] = (byteBuff[i] == 0 ? ' ' : (char)byteBuff[i]);
		return new String(charBuff, 0, len);
	}
",2021-02-23 16:11:13.559126,2021-02-23 16:11:13.559126
152,39298970,getApplicableLaw,,"
 
     public InfluenceLaw getApplicableLaw(Influence inf) {
        if (inf == null) {
            throw new IllegalArgumentException();
        }
        for (Iterator iter = influenceLaws.iterator(); iter.hasNext();) {
            InfluenceLaw infLaw = (InfluenceLaw) iter.next();
            if(infLaw.isApplicableTo(inf)) {
                return infLaw;
            }
        }
        return null;
    }
",2021-02-23 16:11:13.575594,2021-02-23 16:11:13.575594
153,39299426,liesBetween,,"
 
     private boolean liesBetween(double x1, double x2, double x3) {
    	if((x1 <= x2) 
    		&& (x3 >= x1 - ACCURACY && x3 <= x2 + ACCURACY))
    			return true;
    	if((x1 >= x2) 
    		&& (x3 >= x2 - ACCURACY && x3 <= x1 + ACCURACY))
    			return true;
    	
    	return false;
    
    }
",2021-02-23 16:11:13.596286,2021-02-23 16:11:13.596286
154,1810081,onAttach,,"
 
   protected void onAttach() {
    if (attached)
      return;

    attached = true;

    // Set the main element's event listener. This should only be set
    // while the widget is attached, because it creates a circular
    // reference between JavaScript and the DOM.
    DOM.setEventListener(getElement(), this);

    // Now that the widget is attached, call onLoad().
    onLoad();
  }
",2021-02-23 16:11:13.611756,2021-02-23 16:11:13.611756
155,1810886,setNamedItem,,"
 
   public Node setNamedItem(Node arg) {
    try {
      return NodeImpl.build(XMLParserImpl.setNamedItem(this.getJsObject(),
        ((DOMItem) arg).getJsObject()));
    } catch (JavaScriptException e) {
      throw new DOMNodeException(DOMNodeException.INVALID_MODIFICATION_ERR, e, this);
    }
  }
",2021-02-23 16:11:13.627969,2021-02-23 16:11:13.627969
156,20787007,store,,"
 
   public void store(String path, InputStream stream) throws IOException {
    toIgnore.add(normalizePath(path));
    ZipEntry entry = new ZipEntry(path);
    zipOutput.putNextEntry(entry);
    IOUtils.copy(stream, zipOutput);
    zipOutput.closeEntry();
  }
",2021-02-23 16:11:13.644161,2021-02-23 16:11:13.644161
157,28953715,readResponse,,"
 
 	private String readResponse(InputStream stream) {
		BufferedReader input = new BufferedReader(new InputStreamReader(stream));
		StringBuffer sb = new StringBuffer();
		String line;
		try {
			line = input.readLine();
		} catch (IOException e) {
			line = null;
		}
		while (line != null) {
			if (!line.trim().equals("""")) {
				if (sb.length() > 0) sb.append(""\n"");
				sb.append(line);
			}
			try {
				line = input.readLine();
			} catch (IOException e) {
				line = null;
			}
		}
		return sb.toString();
	}
",2021-02-23 16:11:13.662537,2021-02-23 16:11:13.662537
158,36405409,appendDeclarations,,"
 
     public void appendDeclarations(LaTeXDocumentPortion pack, LaTeXDocumentPortion decl) {
        if (bContainsEndnotes) { pack.append(""\\usepackage{endnotes}"").nl(); }
        if (bContainsFootnotes) convertFootnotesConfiguration(decl);
        if (bContainsEndnotes) convertEndnotesConfiguration(decl);
    }
",2021-02-23 16:11:13.678106,2021-02-23 16:11:13.678106
159,26215341,updateGain,,"
 
     private void updateGain() {
      int pos=getValue();
      int value = (int) (127 * (double) (pos / 100.0));
      MidiChannel[] cs = synthesizer.getChannels();
      for(int i=0;i<cs.length;i++) {
	cs[i].controlChange(7,value);
      }
    }
",2021-02-23 16:11:13.697367,2021-02-23 16:11:13.697367
160,42956622,initButtons,,"
 
 	private void initButtons() {
		this.playButton = createButton(BUTTON_FILE_NAME_PREFIX + PLAY_BUTTON_FILE_NAME, PLAY_BUTTON_TOOLTIP);
		this.pauseButton = createButton(BUTTON_FILE_NAME_PREFIX + PAUSE_BUTTON_FILE_NAME, PAUSE_BUTTON_TOOLTIP);
		this.exitButton = createButton(BUTTON_FILE_NAME_PREFIX + EXIT_BUTTON_FILE_NAME, EXIT_BUTTON_TOOLTIP);
	}
",2021-02-23 16:11:13.714329,2021-02-23 16:11:13.714329
161,43303607,iconify,,"
 
     public void iconify(final Frame frame) {
        Point loc = getIconifyLocation(frame);
        if (loc != null) {
            mouseMove(frame, loc.x, loc.y);
        }
        invokeLater(frame, new Runnable() {
            public void run() {
                frame.setState(Frame.ICONIFIED);
            }
        });
    }
",2021-02-23 16:11:13.734905,2021-02-23 16:11:13.734905
162,43310565,_componentDefinition,,"
 
 	public WOComponentDefinition _componentDefinition(String s, NSArray nsarray) {
		if(ERXProperties.booleanForKeyWithDefault(""er.extensions.ERXApplication.fixCachingEnabled"", true)) {
			// _expectedLanguages already contains all the languages in all projects, so
			// there is no need to check for the ones that come in...
			return super._componentDefinition(s, _expectedLanguages());
		}
		return super._componentDefinition(s, nsarray);
	}
",2021-02-23 16:11:13.751751,2021-02-23 16:11:13.751751
163,47570692,goToRegistration,,"
 
 	private void goToRegistration() {
		m_logo.setVisible(false);
		m_login.setText(""Cancel"");
		m_userLabel.setLocation(16, 4);
		m_username.setLocation(16, 24);
		m_passLabel.setLocation(16, 52);
		m_password.setLocation(16, 70);
		m_confirmPass.setVisible(true);
		m_confPassLabel.setVisible(true);
		m_male.setVisible(true);
		m_female.setVisible(true);
		this.setTitle(""Registration"");
	}
",2021-02-23 16:11:13.770301,2021-02-23 16:11:13.770301
164,47571713,saveToFile,,"
 
     public void saveToFile(File f) {
        try {
            FileOutputStream file = new FileOutputStream(f);
            saveToFile(file);
            file.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",2021-02-23 16:11:13.788197,2021-02-23 16:11:13.788197
165,47571922,getEffect,,"
 
     public StatusEffect getEffect(int lock) {
        synchronized (m_statuses) {
            Iterator i = m_statuses.iterator();
            while (i.hasNext()) {
                StatusEffect eff = (StatusEffect)i.next();
                if ((eff == null) || !eff.isActive()) {
                    continue;
                }
                if (eff.getLock() == lock) {
                    return eff;
                }
            }
        }
        return null;
    }
",2021-02-23 16:11:13.804059,2021-02-23 16:11:13.804059
166,1694531,getUserNameFromCookie,,"
 
 	private String getUserNameFromCookie() throws Exception {
		String userName = null;
		// get user name
		Cookie[] cookies = servletRequest.getCookies();
		for (int i = 0; i < cookies.length; i++) {
			Cookie cookie = cookies[i];
			if (cookie != null && cookie.getName().equals(""platform.username"")) {
				String value = cookie.getValue();
				userName = DesEncrypter.getInstance().decrypt(value);
				break;
			}
		}

		return userName;

	}
",2021-02-23 16:11:13.820263,2021-02-23 16:11:13.820263
167,28631042,getMenuAdministracion,,"
 
 	private JMenu getMenuAdministracion() {
		if (menuAdministracion == null) {
			menuAdministracion = new JMenu();
			menuAdministracion.setText(Messages.getString(""gui.GUI.57"")); //$NON-NLS-1$
			menuAdministracion.setIcon(new ImageIcon(
					""data/icons/package_system.png"")); //$NON-NLS-1$
			menuAdministracion.add(getMenuItemAdminUsuarios());
			menuAdministracion.add(getMenuItemAdminResorces());
		}
		return menuAdministracion;
	}
",2021-02-23 16:11:13.837754,2021-02-23 16:11:13.837754
168,47629915,getPassword,,"
 
 	public String getPassword(String user, String server) {

		try {

			KeyStore.SecretKeyEntry entry2 = (KeyStore.SecretKeyEntry) store
					.getEntry(user + ""@"" + server,
							new KeyStore.PasswordProtection(masterPassword));
			return new String(entry2.getSecretKey().getEncoded());
		} catch (KeyStoreException e) {
			e.printStackTrace();
		} catch (UnrecoverableEntryException ce) {
			ce.printStackTrace();
		} catch (NoSuchAlgorithmException ne) {
			ne.printStackTrace();
		}

		return null;
	}
",2021-02-23 16:11:13.854766,2021-02-23 16:11:13.854766
169,18911339,cleanupObject,,"
 
 	protected void cleanupObject(Object obj) {
		if (obj != null) {
			log.debug(""PreparedStatementCache:cleanupObject class='""
					+ obj.getClass() + ""'"");
			log
					.debug(""PreparedStatementCache:cleanupObject close a PreparedStatement o=""
							+ ""'"" + obj.toString() + ""'"");

			try {
				((PreparedStatement) obj).close();
				// obj = null;
			} catch (SQLException e) {
				log
						.error(""PreparedStatementCache:cleanupObject problem to close""
								+ ""a PreparedStatement: "" + e);
			}
		}
	}
",2021-02-23 16:11:13.876717,2021-02-23 16:11:13.876717
170,18912425,tellAgain,,"
 
 	protected void tellAgain(final QName message) throws RemoteException{
		final AbstractCoordParticipantProxy proxy =
			this.getParticipantProxy();

		if (State.MESSAGE_CANCEL.equals(message)){
			proxy.cancelOperation(null);
			
		}else if (State.MESSAGE_COMPENSATE.equals(message)){
			proxy.compensateOperation(null);

		}else if (State.MESSAGE_CLOSE.equals(message)){
			proxy.closeOperation(null);
			
		}else if (State.MESSAGE_EXITED.equals(message)){
			proxy.exitedOperation(null);
			
		}else if (State.MESSAGE_FAULTED.equals(message)){
			proxy.faultedOperation(null);
			
		}else if (State.MESSAGE_GETSTATUS.equals(message)){
			proxy.getStatusOperation(null);
			
		}else{
			throw new IllegalArgumentException(""Sorry, cannot tell a participant ""+message);
		}
	}
",2021-02-23 16:11:13.89365,2021-02-23 16:11:13.89365
171,18929060,checkDescendantM,,"
 
   public boolean checkDescendantM(Member aMember, Member dMember) {
    mondrian.olap.Member monMember = ((MondrianMember) aMember).getMonMember();
    mondrian.olap.Member monDesc = ((MondrianMember) dMember).getMonMember();
    if (monDesc.isCalculatedInQuery() || monDesc.equals(monMember))
      return false;
    return monDesc.isChildOrEqualTo(monMember);
  }
",2021-02-23 16:11:13.910807,2021-02-23 16:11:13.910807
172,34425716,actionLoadNotes,,"
 
     private void actionLoadNotes() {
        enableUserActions(false);

        // set focus, otherwise it gives focus to ""clear"" >> scary/not wanted
        multiSubmitButton.requestFocusInWindow();

        resetSingleTextFields();
        multipleGUIList.clearSelection();
        multipleResources = loadNotesFile();
        updateMultiList();
        enableUserActions(true);
    }
",2021-02-23 16:11:13.928142,2021-02-23 16:11:13.928142
173,34426334,addLimit,,"
 
     private void addLimit(JPopupMenu popup) {
        JMenuItem limit = makeMenuItem(""Write option: Limit days..."",
                ""Specify a limit for the written output, in days"",
                new ActionListener() {

                    @SuppressWarnings(""synthetic-access"")
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        actionLimit();
                    }
                });
        popup.add(limit);
    }
",2021-02-23 16:11:13.944606,2021-02-23 16:11:13.944606
174,34426756,makeCenter,,"
 
     private Component makeCenter() {
        imageCanvas = new JPanel();
        imageCanvas.addMouseListener(new MouseAdapter() {
            @SuppressWarnings(""synthetic-access"")
            @Override
            public void mouseClicked(MouseEvent e) {
                actionImageMouse(e);
            }
        });

        imageCanvas.add(new JLabel(new ImageIcon(
                SWGFrame.class.getResource(""images/swg.png""))));

        return new JScrollPane(imageCanvas);
    }
",2021-02-23 16:11:13.959914,2021-02-23 16:11:13.959914
175,34426938,initOptionsMenu,,"
 
     private void initOptionsMenu(JMenuBar bar) {
        optionsMenu = new JMenu(""Options"");
        optionsMenu.setToolTipText(""Options for SWGAide"");
        optionsMenu.setMnemonic(KeyEvent.VK_O);

        optionsMenu.add(optionsSWGCraftMenuItem());

        optionsMenu.setEnabled(true);
        bar.add(optionsMenu);
    }
",2021-02-23 16:11:13.978736,2021-02-23 16:11:13.978736
176,34427273,populateNewList,,"
 
     private void populateNewList() {
        newResources = mergeNewResources();
        SwingUtilities.invokeLater(new Runnable() {
            @SuppressWarnings(""synthetic-access"")
            @Override
            public void run() {
                newListModel.clear();
                for (Wrapper wr : newResources)
                    newListModel.addElement(wr);
            }
        });
    }
",2021-02-23 16:11:13.994715,2021-02-23 16:11:13.994715
177,39120328,toString,,"
 
     public String toString() {
        StringBuffer sb = new StringBuffer();
	sb.append(""java.util.regex.Matcher"");
	sb.append(""[pattern="" + pattern());
	sb.append("" region="");
	sb.append(regionStart() + "","" + regionEnd());
        sb.append("" lastmatch="");
        if ((first >= 0) && (group() != null)) {
            sb.append(group());
        }
	sb.append(""]"");
	return sb.toString();
    }
",2021-02-23 16:11:14.010893,2021-02-23 16:11:14.010893
178,14467418,setUpMrj,,"
 
   private void setUpMrj() {
    Belvedere4.mrjVersion = System.getProperty(""mrj.version"");
    if (Belvedere4.mrjVersion == null) return;
    try {
      Belvedere4.mrjMajorVersion =
        Double.valueOf(Belvedere4.mrjVersion.substring(0, 3)).doubleValue();
    } catch (Exception e) {
      Belvedere4.mrjMajorVersion = 0;
    }
  }
",2021-02-23 16:11:14.028199,2021-02-23 16:11:14.028199
179,37762493,moveUpTarget,,"
 
 	public void moveUpTarget(int index) {
		Object target= targets.get(index);
		if (index == 0 || target == null) {
			return;
		}
		targets.set(index, targets.get(index - 1));
		targets.set(index - 1, target);
		log.debug(""New ordering"");
		for (int i = 0; i < targets.size(); i++) {
            log.debug(""\t"" + i + targets.get(i));
        }
	}
",2021-02-23 16:11:14.046354,2021-02-23 16:11:14.046354
180,18251847,addDbArgs,,"
 
 	public void addDbArgs(List<String> args) {
		args.add(currentConnection.driverClass);
		args.add(currentConnection.url);
		args.add(currentConnection.user);
		args.add(currentConnection.password);
		if (currentConnection.jar1.trim().length() > 0) {
			args.add(""-jdbcjar"");
			args.add(currentConnection.jar1.trim());
		}
		if (currentConnection.jar2.trim().length() > 0) {
			args.add(""-jdbcjar2"");
			args.add(currentConnection.jar2.trim());
		}
	}
",2021-02-23 16:11:14.064777,2021-02-23 16:11:14.064777
181,18252350,joinTableRender,,"
 
     private String joinTableRender(Table from, Association association) {
    	int n = 0;
    	for (Association a: from.associations) {
    		if (a.destination == association.destination) {
    			++n;
    		}
    	}
    	return datamodel.getDisplayName(association.destination) + (n > 1? "" on ""  + association.getName() : """");
	}
",2021-02-23 16:11:14.081122,2021-02-23 16:11:14.081122
182,34105249,makeUniqueParagraphForGlobalWithLength,,"
 
   public void makeUniqueParagraphForGlobalWithLength(String global, int length) {
    String paragraph = """";
    String word;
    for (int x = 0; x < length; x++) {
      word = makeUniqueStringForGlobalWithLength(global, (int)(Math.random() * 8) + 2);
      paragraph += word + "" "";
    }
    utils.setGlobal(global, paragraph);
  }
",2021-02-23 16:11:14.097238,2021-02-23 16:11:14.097238
183,39215677,iamNear,,"
 
     private boolean iamNear(Actor defender) {
        short xDiff = (short) (defender.getXpos() - getXpos());
        short yDiff = (short) (defender.getYpos() - getYpos());
        if (xDiff > 1 || yDiff > 1 || xDiff < -1 || yDiff < -1) {
            return false;
        }
        return true;
    }
",2021-02-23 16:11:14.122732,2021-02-23 16:11:14.122732
184,45929468,getRelFeedItems,,"
 
 	public List getRelFeedItems(FeedItem feedItem) {
		final int feedId = feedItem.getFeed().getFeedId();
		final String sql = ""select * from T_FeedItem where FEED_ID ="" + feedId;
		return getPagedListByNativeSQL(FeedItem.class, sql, "" id desc"", 1, 20);
	}
",2021-02-23 16:11:14.146237,2021-02-23 16:11:14.146237
185,31788771,addUIDeployment,,"
 
     public void addUIDeployment(SandUIDeployment uidep) {
        SandUIDeployment[] olduis=getSandUIDeployments();
        SandUIDeployment[] newuis=new SandUIDeployment[olduis.length+1];
        System.arraycopy(olduis,0,newuis,0,olduis.length);
        newuis[olduis.length]=uidep;
        setSandUIDeployments(newuis);
    }
",2021-02-23 16:11:14.164128,2021-02-23 16:11:14.164128
186,31789275,setGenJarDir,,"
 
     public void setGenJarDir(File genJarDir,SandProject proj) {
        proj.getAntProject().setProperty(""genJarDir"",genJarDir.toString());
        SandProject[] downstream=proj.getRequiredBy();
        for(int i=0;i<downstream.length;i++) {
            setGenJarDir(genJarDir,downstream[i]); }
    }
",2021-02-23 16:11:14.181331,2021-02-23 16:11:14.181331
187,46707537,setValue,,"
 
     public void setValue(ASN1Type nval) throws java.security.cert.CertificateEncodingException {
	ByteArrayOutputStream baos = new ByteArrayOutputStream();

	try {
            nval.encode(new DEREncoder(baos));
            extnValue.setByteArray(baos.toByteArray());
	}
	catch (Exception e) {
            throw new java.security.cert.CertificateEncodingException(e.getMessage());
	}
	
    }  
",2021-02-23 16:11:14.201035,2021-02-23 16:11:14.201035
188,16632712,initSelectedClassList,,"
 
     private void initSelectedClassList() {
        for (IClassRelationShip classRelationShip : classRelationShipList) {
            String className = classRelationShip.getClassName();
            selectedClassList.add(className);
        }
        selectedClassesListModel = new CustomizedListModel(selectedClassList);
        classNamesList.setModel(selectedClassesListModel);
    }
",2021-02-23 16:11:14.217434,2021-02-23 16:11:14.217434
189,33519720,encode,,"
 
     public String encode(String string) throws EncoderException {
        
        byte[] bytes, encoded_bytes;
        String encoded_string = """";
        
        try {
            bytes = string.getBytes(""UTF-8"");
            encoded_bytes = encodeBase64(bytes);
            encoded_string = new String(encoded_bytes);
        
        } catch (UnsupportedEncodingException ex) {
            ex.printStackTrace();
        }
        return encoded_string;
    }
",2021-02-23 16:11:14.234913,2021-02-23 16:11:14.234913
190,12074406,getPreferenceStore,,"
 
 	private PreferenceStore getPreferenceStore(final Shell shell) {
		try {
			final File preferencesFile = new File(""preferences.properties""); //$NON-NLS-1$
			PreferenceStore store;

			if (!preferencesFile.exists()) {
				// create new preferences file
				preferencesFile.createNewFile();
			}

			store = new PreferenceStore(preferencesFile.getName());
			store.load();
			return store;
		} catch (final IOException e) {
			throw new PhotoListerException(""Unable to load preferences.""); //$NON-NLS-1$
		}
	}
",2021-02-23 16:11:14.251431,2021-02-23 16:11:14.251431
191,1782360,getImageWithSource,,"
 
     public WebImage getImageWithSource( String source ) {
        WebImage[] images = getImages();
        for (int i = 0; i < images.length; i++) {
            if (HttpUnitUtils.matches( source, images[i].getSource() )) return images[i];
        }
        return null;
    }
",2021-02-23 16:11:14.269039,2021-02-23 16:11:14.269039
192,48104729,clone,,"
 
         public Object clone() {
            Format result = new Format();

            result.datatype = datatype;
            result.datatypeID = datatypeID;
            result.respectCase = respectCase;
            result.gap = gap;
            result.missing = missing;
            result.labels = labels;
            result.labelQuotes = labelQuotes;
            result.transpose = transpose;
            result.interleave = interleave;
            result.diploid = diploid;
            result.tokens = tokens;
            result.symbols = symbols;
            result.matchChar = matchChar;

            return result;
        }
",2021-02-23 16:11:14.287083,2021-02-23 16:11:14.287083
193,39233258,getJSplitPane,,"
 
     private JSplitPane getJSplitPane() {

        if (jSplitPane == null) {
            jSplitPane = new JSplitPane();

            DevicesTreePanel p = new DevicesTreePanel();
            p.addSelectionChangeListener(this);
            jSplitPane.setLeftComponent(p);
            jSplitPane.setRightComponent(getJTabbedPane());

            jSplitPane.setDividerSize(5);
            jSplitPane.setDividerLocation(200);
        }
        return jSplitPane;
    }
",2021-02-23 16:11:14.304557,2021-02-23 16:11:14.304557
194,45130358,evaluate,,"
 
     public Value evaluate(Value value) throws ExternalFunctionException {
        
        if (!(value instanceof Literal)) {
            throw new ExternalFunctionException(""Values need to be literals to be understood"");
        }
        
        DateTime date = this.converter.convertDateTime((Literal) value);
        
        return this.converter.convertInteger(date.getHour());
    }
",2021-02-23 16:11:14.321453,2021-02-23 16:11:14.321453
195,45130803,castLiteral,,"
 
 	public Value castLiteral(Literal literal) throws IllegalCastException {
		if (!literal.getLabel().equalsIgnoreCase(""true"") && !literal.getLabel().equalsIgnoreCase(""false"")) {
			throw new IllegalCastException(""Unable to cast string to boolean"");
		}
		return this.factory.createLiteral(literal.getLabel(), SPARQLConstants.BOOLEAN_TYPE);
	}
",2021-02-23 16:11:14.346684,2021-02-23 16:11:14.346684
196,3934822,documentLoadingCompleted,,"
 
 	public void documentLoadingCompleted(SVGDocumentLoaderEvent e) {
		if (debug) {
			System.out.print(""Document load completed in "");
			System.out.println((System.currentTimeMillis() - time) + "" ms"");
		}

		setSVGDocument(e.getSVGDocument(), e.getSVGDocument().getURL(), e.getSVGDocument().getTitle());
	}
",2021-02-23 16:11:14.364767,2021-02-23 16:11:14.364767
197,46106919,update,,"
 
     private void update() {
        currentTime = System.currentTimeMillis();
        if (currentTime - lastTime > updateInterval && running) {
            currentFrame++;
            lastTime = currentTime;

            if (currentFrame >= frames.size()) {
                currentFrame = 0;
                if (!isLoop)
                    running = false;
            }
        }
    }
",2021-02-23 16:11:14.38381,2021-02-23 16:11:14.38381
198,250694,getCollaborateCollection,,"
 
 	public List getCollaborateCollection(String userID) throws AccessException {
		logger.debug(""entering getCollaborateCollection()"");
		String query = ""SELECT collection.PID PID, collection.TITLE TITLE, ""
				+ "" collectionrole.ROLE ROLE FROM collectionrole, collection WHERE ""
				+ "" collectionrole.USERID = '"" + userID + ""'""
				+ "" AND collectionrole.COLLECTIONPID = collection.PID""
				+ "" AND collection.ROOT = '1'"";
		List list = buildResult(query);
		return list;
	}
",2021-02-23 16:11:14.401894,2021-02-23 16:11:14.401894
199,51577053,addPKColumn,,"
 
     public void addPKColumn(String aPKColName) throws IllegalArgumentException {
        Column col = (Column) colMap.get(aPKColName);
        if (col == null) {
            throw new IllegalArgumentException (""The column |"" + aPKColName
                    + ""| does not belong to the table |"" + name + ""|"");
        }
        pkColumns.add(col);
    }
",2021-02-23 16:11:14.423025,2021-02-23 16:11:14.423025
200,35061399,leaveAll,,"
 
 	private void leaveAll( MouseEvent<? extends EventHandler> event ) {
		LocInfo locInfo = new LocInfo();
		assert( !locInfo.isVertexLocValid() );
		assert( !locInfo.isVerticalEdgeLocValid() );
		assert( !locInfo.isHorizontalEdgeLocValid() );
		assert( !locInfo.isCellLocValid() );
		handleLeaveEvents( locInfo, event );
		lastLocInfo.copy( locInfo );
	}
",2021-02-23 16:11:14.441486,2021-02-23 16:11:14.441486
201,42170923,addModePropertyDescriptor,,"
 
   protected void addModePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_OccursModel_mode_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_OccursModel_mode_feature"", ""_UI_OccursModel_type""),
				 TimeBasedRoutingPackage.Literals.OCCURS_MODEL__MODE,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:14.467086,2021-02-23 16:11:14.467086
202,42171835,addUseCachePropertyDescriptor,,"
 
   protected void addUseCachePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_OpenQuery_useCache_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_OpenQuery_useCache_feature"", ""_UI_OpenQuery_type""),
				 ActionStepPackage.eINSTANCE.getOpenQuery_UseCache(),
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:14.482943,2021-02-23 16:11:14.482943
203,42171903,addSessionVariablesPropertyDescriptor,,"
 
   protected void addSessionVariablesPropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_SafletContext_sessionVariables_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_SafletContext_sessionVariables_feature"", ""_UI_SafletContext_type""),
				 SafletPackage.Literals.SAFLET_CONTEXT__SESSION_VARIABLES,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:14.499035,2021-02-23 16:11:14.499035
204,42172736,addMaxPoolSizePropertyDescriptor,,"
 
   protected void addMaxPoolSizePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_DBConnection_maxPoolSize_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_DBConnection_maxPoolSize_feature"", ""_UI_DBConnection_type""),
				 DbPackage.Literals.DB_CONNECTION__MAX_POOL_SIZE,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:14.514306,2021-02-23 16:11:14.514306
205,42172743,addMaxIdleTimePropertyDescriptor,,"
 
   protected void addMaxIdleTimePropertyDescriptor(Object object) {
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString(""_UI_DBConnection_maxIdleTime_feature""),
				 getString(""_UI_PropertyDescriptor_description"", ""_UI_DBConnection_maxIdleTime_feature"", ""_UI_DBConnection_type""),
				 DbPackage.Literals.DB_CONNECTION__MAX_IDLE_TIME,
				 true,
				 false,
				 false,
				 ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,
				 null,
				 null));
	}
",2021-02-23 16:11:14.530835,2021-02-23 16:11:14.530835
206,1118165,modifyRoleInCache,,"
 
 	public void modifyRoleInCache(Role role, String orgRolename) {
		Set users = role.getUsers();
		for (Iterator iter = users.iterator(); iter.hasNext();) {
			User user = (User) iter.next();
			userDetailsInCache(user);
		}

		for (Iterator iter = role.getRescs().iterator(); iter.hasNext();) {
			Resource resource = (Resource) iter.next();
			resourceDetailsInCache(resource);
		}
	}
",2021-02-23 16:11:14.547484,2021-02-23 16:11:14.547484
207,19218425,getClassNameForLookAndFeel,,"
 
     public String getClassNameForLookAndFeel(String name) {
        if (lfNameToLookAndFeel.containsKey(name)) {
            UIManager.LookAndFeelInfo lookAndFeelInfo =
                    (UIManager.LookAndFeelInfo) lfNameToLookAndFeel.get(name);
            return lookAndFeelInfo.getClassName();
        }
        else {
            return null;
        }
    }
",2021-02-23 16:11:14.563638,2021-02-23 16:11:14.563638
208,34609355,getFastestGenerator,,"
 
     public WordFormGenerator getFastestGenerator(final Locale locale) throws MorphologyException {
        if (locale == null) {
            throw new IllegalArgumentException(""The 'loc' argument cannot be null."");
        }
        WordFormGenerator component = (WordFormGenerator) fastestGenerators.get(locale);
        if (component == null) {
            throw new MorphologyException(""Cannot find generator for locales : "" + locale.toString());
        }
        return component;
    }
",2021-02-23 16:11:14.580047,2021-02-23 16:11:14.580047
209,29591879,addCoordinateAxis,,"
 
   public CoordinateAxis addCoordinateAxis( VariableDS v) {
    if (v == null) return null;
    variables.remove( v); // remove by name if it exists
    coordAxes.remove( v);
    CoordinateAxis ca = (v instanceof CoordinateAxis) ? (CoordinateAxis) v : CoordinateAxis.factory(this, v);
    variables.add( ca);
    coordAxes.add( ca);
    return ca;
  }
",2021-02-23 16:11:14.596424,2021-02-23 16:11:14.596424
210,43845892,strBuilderToString,,"
 
     public ByteCodeHelper strBuilderToString(int pos) {
        mv.visitVarInsn(Opcodes.ALOAD, pos);
        mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, ""java/lang/StringBuilder"", ""toString"", ""()Ljava/lang/String;"");
        mv.visitInsn(Opcodes.POP);
        return this;
    }
",2021-02-23 16:11:14.613486,2021-02-23 16:11:14.613486
